<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>concept</title>
    <url>/2025/10/10/concept/</url>
    <content><![CDATA[<p>Concept是C++20引用的一种对模板参数进行约束的机制，它允许程序员明确指定模板参数必须满足的要求，从而在编译期就能捕获不符合要求的模板参数错误。</p>
<h1 id="语法基础"><a href="#语法基础" class="headerlink" title="语法基础"></a>语法基础</h1><ul>
<li><p>定义</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">concept</span> MyConcept = <span class="built_in">requires</span>(T a,T b)&#123;</span><br><span class="line">    &#123;a+b&#125;-&gt;std::convertible_to&lt;T&gt;;</span><br><span class="line">    a.<span class="built_in">size</span>();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用</p>
  <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">template</span>&lt;MyConcept T&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">myFunction</span><span class="params">(T param)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<p>标准库中存在很多预定义的concept，在<code>&lt;concepts&gt;</code>头文件中。</p>
<h1 id="requires"><a href="#requires" class="headerlink" title="requires"></a>requires</h1><p>requires表达式用于定义Concept的具体要求。子句类型有如下几种：</p>
<ul>
<li><p>简单要求<br>  只要求表达式是否合法：<code>{a+b}</code></p>
</li>
<li><p>类型要求<br>  检查类型是否存在:<code>typename T::value_type;</code></p>
</li>
<li><p>符合要求<br>  检查表达式属性：<code>{a+b}-&gt;std::same_as&lt;T&gt;;</code></p>
</li>
<li><p>嵌套要求<br>  在requires表达式内使用constexpr布尔表达式：<code>requires sizeof(T)&gt;4;</code></p>
</li>
</ul>
<h1 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h1><p>应用场景包括约束函数模板、类模板、约束auto变量、约束返回类型、约束多个参数。</p>
]]></content>
      <categories>
        <category>cpp</category>
      </categories>
  </entry>
  <entry>
    <title>constexpr</title>
    <url>/2025/10/10/constexpr/</url>
    <content><![CDATA[<h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><p>常量表达式是C++11的关键字，在编译时就可以计算表达式的值</p>
<blockquote>
<p>作用：</p>
<ol>
<li>编译时计算</li>
<li>性能优化</li>
<li>类型安全</li>
</ol>
</blockquote>
<p>和const的区别是其为编译时初始化，const为运行时初始化。</p>
<h1 id="修饰变量"><a href="#修饰变量" class="headerlink" title="修饰变量"></a>修饰变量</h1><p>编译期常量</p>
<h1 id="修饰函数"><a href="#修饰函数" class="headerlink" title="修饰函数"></a>修饰函数</h1><p>函数在编译期即可调用：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">constexpr</span> <span class="type">int</span> <span class="title">square</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x*x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> val = <span class="built_in">square</span>(<span class="number">5</span>);</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>cpp</category>
      </categories>
  </entry>
  <entry>
    <title>CRTP</title>
    <url>/2025/10/11/crtp/</url>
    <content><![CDATA[<h1 id="CRTP语法"><a href="#CRTP语法" class="headerlink" title="CRTP语法"></a>CRTP语法</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> Derived&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Base</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">interface</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 静态向下转换到派生类</span></span><br><span class="line">        <span class="built_in">static_cast</span>&lt;Derived*&gt;(<span class="keyword">this</span>)-&gt;<span class="built_in">implementation</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Derived</span> : <span class="keyword">public</span> Base&lt;Derived&gt; &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">implementation</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 具体实现</span></span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Derived implementation&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h1 id="CRTP的作用"><a href="#CRTP的作用" class="headerlink" title="CRTP的作用"></a>CRTP的作用</h1><p>无虚函数开销，适用于静态时多态。具有性能优势和编译时多态的特点。</p>
<h1 id="风险"><a href="#风险" class="headerlink" title="风险"></a>风险</h1><p>基类使用派生类成员如果没有这个方法，编译会错误。解决方法为使用Concept</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">concept</span> Drawable = <span class="built_in">requires</span>(T t)&#123;</span><br><span class="line">    t.<span class="built_in">draw</span>();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;Drawable Derived&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GraphicsBase</span>&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>cpp</category>
      </categories>
  </entry>
  <entry>
    <title>RAII避免异常导致的资源泄露</title>
    <url>/2025/10/29/RAII%E9%81%BF%E5%85%8D%E5%BC%82%E5%B8%B8%E5%AF%BC%E8%87%B4%E7%9A%84%E8%B5%84%E6%BA%90%E6%B3%84%E9%9C%B2/</url>
    <content><![CDATA[<p>在C++中，使用RAII来管理动态内存，其本身就是为了从根本避免异常导致的资源泄露。关键在于：将资源的生命周期与对象的生命周期绑定，当对象离开其作用域时（无论是正常还是异常栈展开），他的析构函数都会被自动调用，从而确保资源被释放。</p>
<span id="more"></span>

<h1 id="文件句柄RAII"><a href="#文件句柄RAII" class="headerlink" title="文件句柄RAII"></a>文件句柄RAII</h1><p>使用智能指针的方法讲了数次了，这里不展开了。RAII的思想不限于内存，还包括文件句柄、套接字等。这里举例一个文件句柄：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">FileRAII</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    FILE* file_ptr;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// 构造函数获取资源</span></span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">FileRAII</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* filename, <span class="type">const</span> <span class="type">char</span>* mode)</span> </span></span><br><span class="line"><span class="function">        : file_ptr(std::fopen(filename, mode)) &#123;</span></span><br><span class="line">        <span class="keyword">if</span> (!file_ptr) &#123;</span><br><span class="line">            <span class="keyword">throw</span> std::<span class="built_in">runtime_error</span>(<span class="string">&quot;Failed to open file&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 析构函数释放资源</span></span><br><span class="line">    ~<span class="built_in">FileRAII</span>() &#123;</span><br><span class="line">        <span class="keyword">if</span> (file_ptr) &#123;</span><br><span class="line">            std::<span class="built_in">fclose</span>(file_ptr);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 禁止拷贝（或实现深拷贝/移动语义）</span></span><br><span class="line">    <span class="built_in">FileRAII</span>(<span class="type">const</span> FileRAII&amp;) = <span class="keyword">delete</span>;</span><br><span class="line">    FileRAII&amp; <span class="keyword">operator</span>=(<span class="type">const</span> FileRAII&amp;) = <span class="keyword">delete</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 可选：提供访问原始资源的接口</span></span><br><span class="line">    <span class="function">FILE* <span class="title">get</span><span class="params">()</span> <span class="type">const</span> </span>&#123; <span class="keyword">return</span> file_ptr; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">useFile</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">FileRAII <span class="title">file</span><span class="params">(<span class="string">&quot;data.txt&quot;</span>, <span class="string">&quot;r&quot;</span>)</span></span>; <span class="comment">// 文件被打开</span></span><br><span class="line">    <span class="built_in">someFunctionThatMightThrow</span>();   <span class="comment">// 可能抛出异常</span></span><br><span class="line">    <span class="comment">// 读取文件...</span></span><br><span class="line">&#125; <span class="comment">// 无论是否异常，file的析构函数都会关闭文件 -&gt; 无资源泄漏！</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="崩溃"><a href="#崩溃" class="headerlink" title="崩溃"></a>崩溃</h1><p>RAII处理内存释放问题是基于程序正常的控制流的，当系统出现段异常等非正常终止情况时，RAII也没有办法。现代操作系统（如Linux, Windows）在进程终止时，会回收该进程拥有的所有内存和大多数内核资源（如文件描述符、套接字）。所以，对于内存和这些内核资源，即使崩溃也不会造成“永久性泄漏”。</p>
<p>但是，如果是数据库事务等资源，则需要人们从系统架构层面考虑。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul>
<li>核心原则：将资源获取置于构造函数内，将资源释放置于析构函数内。</li>
<li>依赖栈展开：信任C++的异常机制。当异常抛出时，系统会析构所有已成功构造的局部RAII对象，从而自动释放其管理的资源。</li>
<li>优先使用标准库工具：对于动态内存，首选 std::unique_ptr 和 std::shared_ptr，并使用 make_unique&#x2F;make_shared 来构造它们。这是最简单、最安全的方式。</li>
<li>为其他资源自定义RAII类：对于非内存资源，遵循同样的模式封装成类，从而将琐碎且易错的资源管理任务转化为可靠的、自动化的对象生命周期管理。</li>
</ul>
]]></content>
      <categories>
        <category>cpp</category>
      </categories>
  </entry>
  <entry>
    <title>decltype</title>
    <url>/2025/10/10/decltype/</url>
    <content><![CDATA[<h1 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">decltype</span>(expression) varible;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>expression是一个未加括号的标识符</p>
<p>直接返回该标识符的声明类型</p>
</li>
<li><p>expression是一个函数调用或者加括号的表达式</p>
<p>返回函数返回类型或者表达式结果类型（左值引用）</p>
</li>
</ul>
<h1 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h1><ol>
<li><p>泛型函数返回值类型</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> Container&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">auto</span> <span class="title">getValue</span><span class="params">(Container&amp; c, <span class="type">int</span> index)</span> -&gt; <span class="title">decltype</span><span class="params">(c[index])</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> c[index];  <span class="comment">// 返回引用类型，可修改元素</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>cpp</category>
      </categories>
  </entry>
  <entry>
    <title>dog2</title>
    <url>/2025/10/17/dog2/</url>
    <content><![CDATA[<p><img src="/2025/10/17/dog2/mmexport1760672311013.jpg" alt="mmexport1760672311013"></p>
]]></content>
      <categories>
        <category>pets</category>
      </categories>
  </entry>
  <entry>
    <title>cmake</title>
    <url>/2025/10/13/cmake/</url>
    <content><![CDATA[<h1 id="生成静态-动态链接库"><a href="#生成静态-动态链接库" class="headerlink" title="生成静态&#x2F;动态链接库"></a>生成静态&#x2F;动态链接库</h1><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">math_library/</span><br><span class="line">├── CMakeLists.txt</span><br><span class="line">├── include/</span><br><span class="line">│   └── math_utils.h</span><br><span class="line">└── src/</span><br><span class="line">    └── math_utils.cpp</span><br></pre></td></tr></table></figure>

<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p><strong>头文件：</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">multiply</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span>;</span><br></pre></td></tr></table></figure>

<p><strong>源文件：</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;math_utiles.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">multiply</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a * b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>Cmake:</strong></p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.10</span>)</span><br><span class="line"><span class="keyword">project</span>(MathLibrary VERSION <span class="number">1.0</span>.<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span>(CMAKE_CXX_STANDARD <span class="number">11</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">include_directories</span>(<span class="keyword">include</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">add_library</span>(math_shared SHARED src/math_utils.cpp)</span><br><span class="line"><span class="keyword">add_library</span>(math_static STATIC src/math_utils.cpp)</span><br></pre></td></tr></table></figure>

<h1 id="写一个程序用到上面的动态库"><a href="#写一个程序用到上面的动态库" class="headerlink" title="写一个程序用到上面的动态库"></a>写一个程序用到上面的动态库</h1><p><strong>目录：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">project_root/</span><br><span class="line">├── math_library/</span><br><span class="line">│   ├── include/</span><br><span class="line">│   │   └── math_utiles.h</span><br><span class="line">│   ├── src/</span><br><span class="line">│   │   ├── math_utiles.cpp</span><br><span class="line">│   │   └── CMakeLists.txt</span><br><span class="line">│   ├── lib/</span><br><span class="line">│   │   └── libmath_shared.so</span><br><span class="line">│   └── CMakeLists.txt</span><br><span class="line">├── math_test/</span><br><span class="line">│   ├── CMakeLists.txt</span><br><span class="line">│   └── test_math.cpp</span><br><span class="line">└── CMakeLists.txt (顶层)</span><br></pre></td></tr></table></figure>

<p><strong>源文件：</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;math_utiles.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    std::cout&lt;&lt;<span class="string">&quot;3+4=&quot;</span>&lt;&lt;<span class="built_in">add</span>(<span class="number">3</span>,<span class="number">4</span>)&lt;&lt;std::endl;</span><br><span class="line">    std::cout&lt;&lt;<span class="string">&quot;3*4=&quot;</span>&lt;&lt;<span class="built_in">multiply</span>(<span class="number">3</span>,<span class="number">4</span>)&lt;&lt;std::endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>Cmake:</strong></p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.10</span>)</span><br><span class="line"><span class="keyword">project</span>(MathTest)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置库文件路径</span></span><br><span class="line"><span class="keyword">set</span>(MATH_UTILS_LIB <span class="string">&quot;$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;/libmath_shared.so&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建测试程序</span></span><br><span class="line"><span class="keyword">add_executable</span>(test_math test_math.cpp)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 链接库并包含头文件</span></span><br><span class="line"><span class="keyword">target_link_libraries</span>(test_math PRIVATE <span class="variable">$&#123;MATH_UTILS_LIB&#125;</span>)</span><br><span class="line"><span class="keyword">target_include_directories</span>(test_math PRIVATE </span><br><span class="line">    <span class="variable">$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;</span>/../math_library/<span class="keyword">include</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果库不在当前目录，需要复制或创建符号链接</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">NOT</span> <span class="keyword">EXISTS</span> <span class="variable">$&#123;MATH_UTILS_LIB&#125;</span>)</span><br><span class="line">    <span class="keyword">message</span>(WARNING <span class="string">&quot;libmath_shared.so not found in current directory&quot;</span>)</span><br><span class="line"><span class="keyword">endif</span>()</span><br></pre></td></tr></table></figure>

<h1 id="Cmake问题"><a href="#Cmake问题" class="headerlink" title="Cmake问题"></a>Cmake问题</h1><h2 id="PRIVATE-PUBLIC-INTERFACE区别"><a href="#PRIVATE-PUBLIC-INTERFACE区别" class="headerlink" title="PRIVATE PUBLIC INTERFACE区别"></a>PRIVATE PUBLIC INTERFACE区别</h2><ul>
<li><p>public</p>
<p>A和依赖A的目标都能使用</p>
</li>
<li><p>private</p>
<p>仅A使用</p>
</li>
<li><p>interface</p>
<p>仅依赖A的目标能使用</p>
</li>
</ul>
<h2 id="动态链接库对比静态链接库有哪些好处"><a href="#动态链接库对比静态链接库有哪些好处" class="headerlink" title="动态链接库对比静态链接库有哪些好处"></a>动态链接库对比静态链接库有哪些好处</h2><ol>
<li>节省磁盘空间</li>
<li>更新维护时不需要重新编译</li>
<li>dlopen可以按需加载</li>
</ol>
]]></content>
      <categories>
        <category>cpp</category>
      </categories>
  </entry>
  <entry>
    <title>inline</title>
    <url>/2025/10/11/inline/</url>
    <content><![CDATA[<h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 声明为inline的函数</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> result = <span class="built_in">add</span>(<span class="number">3</span>, <span class="number">4</span>);  <span class="comment">// 可能被内联</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>内联后</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> result = <span class="number">3</span> + <span class="number">4</span>;  <span class="comment">// 直接替换函数调用</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="编译器不内联的情况"><a href="#编译器不内联的情况" class="headerlink" title="编译器不内联的情况"></a>编译器不内联的情况</h1><ol>
<li>函数体过于复杂</li>
<li>递归</li>
<li>包含静态变量</li>
<li>虚函数</li>
<li>函数指针调用</li>
</ol>
]]></content>
      <categories>
        <category>cpp</category>
      </categories>
  </entry>
  <entry>
    <title>gdb常用命令</title>
    <url>/2025/10/13/gdb%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<p>顺口溜：冷若冰霜驱动盘</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">l list <span class="comment"># 查看源码</span></span><br><span class="line"></span><br><span class="line">r run <span class="comment"># 运行程序</span></span><br><span class="line"></span><br><span class="line">b <span class="built_in">break</span> <span class="comment"># 设置断点</span></span><br><span class="line"></span><br><span class="line">s step <span class="comment"># 单步执行（进入函数）</span></span><br><span class="line"></span><br><span class="line">q quit <span class="comment"># 退出gdb</span></span><br><span class="line"></span><br><span class="line">d delete <span class="comment"># 删除断点</span></span><br><span class="line"></span><br><span class="line">p <span class="built_in">print</span> <span class="comment"># 打印变量值</span></span><br></pre></td></tr></table></figure>

<p>再加几个常用的：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bt backtrace <span class="comment"># 查看调用栈</span></span><br><span class="line"></span><br><span class="line">c <span class="built_in">continue</span> <span class="comment"># 继续执行</span></span><br><span class="line"></span><br><span class="line">n next <span class="comment"># 单步执行（不进入函数）</span></span><br><span class="line"></span><br><span class="line">f finish <span class="comment"># 执行完当前函数</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">disable</span> 2 <span class="comment"># 禁用编号为2的断点</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>linux</category>
      </categories>
  </entry>
  <entry>
    <title>linux常用命令</title>
    <url>/2025/10/13/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h2 id="文件和目录操作"><a href="#文件和目录操作" class="headerlink" title="文件和目录操作"></a>文件和目录操作</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">pwd</span>       <span class="comment"># 显示当前目录</span></span><br><span class="line"><span class="built_in">cd</span>        <span class="comment"># 切换目录</span></span><br><span class="line"><span class="built_in">ls</span>        <span class="comment"># 列出目录内容</span></span><br><span class="line"><span class="built_in">cp</span>        <span class="comment"># 复制文件/目录</span></span><br><span class="line">    <span class="built_in">cp</span> file.txt backup/</span><br><span class="line">    <span class="built_in">cp</span> -r dir1/ dir2/</span><br><span class="line"><span class="built_in">mv</span>        <span class="comment"># 移动文件/目录，也用于重命名</span></span><br><span class="line">	<span class="built_in">mv</span> 源文件 目标文件</span><br><span class="line"><span class="built_in">touch</span>     <span class="comment"># 创建空文件或更新文件时间戳</span></span><br><span class="line"><span class="built_in">mkdir</span>     <span class="comment"># 创建目录</span></span><br><span class="line"><span class="built_in">rmdir</span>     <span class="comment"># 移除空目录</span></span><br><span class="line"><span class="built_in">rm</span>        <span class="comment"># 删除文件/目录</span></span><br><span class="line">find      <span class="comment"># 查找文件</span></span><br><span class="line">	find 路径 选项 表达式</span><br><span class="line">	find /home -name <span class="string">&quot;*.txt&quot;</span></span><br><span class="line"><span class="built_in">which</span>     <span class="comment"># 查找命令位置</span></span><br><span class="line">whereis   <span class="comment"># 查找程序相关文件</span></span><br></pre></td></tr></table></figure>

<h1 id="文件查看和处理"><a href="#文件查看和处理" class="headerlink" title="文件查看和处理"></a>文件查看和处理</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span>       <span class="comment"># 显示文件内容</span></span><br><span class="line">    <span class="built_in">cat</span> tmp.txt</span><br><span class="line">    <span class="built_in">cat</span> -n tmp.txt 显示行号</span><br><span class="line">less/more <span class="comment"># 分页查看文件</span></span><br><span class="line">    less large_file.log <span class="comment">#支持翻页。less比more好用，不介绍more了</span></span><br><span class="line"><span class="built_in">head</span>      <span class="comment"># 查看文件前几行</span></span><br><span class="line"><span class="built_in">tail</span>      <span class="comment"># 查看文件后几行</span></span><br><span class="line"><span class="built_in">wc</span>        <span class="comment"># 统计文件行数、字数、字节数</span></span><br><span class="line">diff      <span class="comment"># 比较文件差异</span></span><br><span class="line">grep      <span class="comment"># 搜索文本</span></span><br><span class="line">    grep <span class="string">&quot;error&quot;</span> server.log <span class="comment">#直接查</span></span><br><span class="line">    grep -r <span class="string">&quot;404&quot;</span> /var/log  <span class="comment">#递归查找目录</span></span><br></pre></td></tr></table></figure>

<h1 id="系统监控"><a href="#系统监控" class="headerlink" title="系统监控"></a>系统监控</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ps        <span class="comment"># 查看进程</span></span><br><span class="line">    ps -ef | grep nginx</span><br><span class="line">top/htop  <span class="comment"># 系统进程监控</span></span><br><span class="line"><span class="built_in">kill</span>      <span class="comment"># 终止进程</span></span><br><span class="line">    <span class="built_in">kill</span> -9 5678</span><br><span class="line">free -h   <span class="comment"># 查看剩余内存</span></span><br><span class="line"><span class="built_in">df</span> -h     <span class="comment"># 查看磁盘使用情况</span></span><br><span class="line"><span class="built_in">du</span> -sh    <span class="comment"># 查看目录大小</span></span><br><span class="line">netstat   <span class="comment"># 网络连接状态</span></span><br><span class="line">ss        <span class="comment"># 更现代的网络状态查看</span></span><br></pre></td></tr></table></figure>

<h1 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ping      <span class="comment"># 测试网络连通性</span></span><br><span class="line">telnet    <span class="comment"># 测试端口连通性</span></span><br><span class="line">curl      <span class="comment"># 发送HTTP请求</span></span><br><span class="line">wget      <span class="comment"># 下载文件</span></span><br><span class="line">nc/netcat <span class="comment"># 网络调试工具</span></span><br><span class="line">ifconfig/ip <span class="comment"># 网络接口配置</span></span><br></pre></td></tr></table></figure>

<h1 id="权限设置"><a href="#权限设置" class="headerlink" title="权限设置"></a>权限设置</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">chmod</span>     <span class="comment"># 修改文件权限</span></span><br><span class="line">    <span class="built_in">chmod</span> 777 config.conf</span><br><span class="line">    <span class="built_in">chmod</span> (u/g/o/a)+(r/w/x) script.sh</span><br></pre></td></tr></table></figure>

<h1 id="压缩"><a href="#压缩" class="headerlink" title="压缩"></a>压缩</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar       <span class="comment"># 打包压缩</span></span><br><span class="line">    tar -zcvf log.tar.gz /var/log</span><br><span class="line">    tar -xvf archive.tar -C /var/log</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>linux</category>
      </categories>
  </entry>
  <entry>
    <title>linux性能调优经验</title>
    <url>/2025/10/13/linux%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98%E7%BB%8F%E9%AA%8C/</url>
    <content><![CDATA[<h1 id="多线程异步问题怎么解决"><a href="#多线程异步问题怎么解决" class="headerlink" title="多线程异步问题怎么解决?"></a>多线程异步问题怎么解决?</h1><p>锁、原子操作、条件变量、线程池。</p>
<p>muduo里的方法是：</p>
<ol>
<li>one loop per thread 尽量减少跨线程通信</li>
<li>线程安全的跨线程调用，用runInloop提交任务</li>
</ol>
<h1 id="发生内存泄漏时如何排查问题"><a href="#发生内存泄漏时如何排查问题" class="headerlink" title="发生内存泄漏时如何排查问题"></a>发生内存泄漏时如何排查问题</h1><ol>
<li>gflags+umdh</li>
<li>代码内循环</li>
<li>共享内存泄露用查句柄泄露的方法排查</li>
</ol>
<h1 id="CPU占用超过70-，如何排查？"><a href="#CPU占用超过70-，如何排查？" class="headerlink" title="CPU占用超过70%，如何排查？"></a>CPU占用超过70%，如何排查？</h1><ol>
<li>死循环或者低效算法<br> 比如增加休眠时间，优化算法<br> while(!ready)一直在占用CPU，要改成条件变量</li>
<li>多线程在锁上等待<br> 减小锁的粒度</li>
<li>IO太多<br> 比如日志等级太低，是否可以减少输出</li>
</ol>
<h1 id="性能调优经验案例"><a href="#性能调优经验案例" class="headerlink" title="性能调优经验案例"></a>性能调优经验案例</h1><ol>
<li><p>CPU调优</p>
<p> perf火焰图显示热点在map.find<br> 改用unordered_map</p>
</li>
<li><p>内存调优</p>
<p> 无内存泄漏但是内存碎片化严重<br> 对象复用</p>
</li>
</ol>
<p>经验：</p>
<ol>
<li>先测量，再优化</li>
<li>优先优化热点函数</li>
<li>不要猜，用火焰图证明</li>
<li>多个小优化会带来大优化</li>
<li>优化完成需要回归测试</li>
</ol>
<h1 id="观测性能瓶颈时是什么资源问题"><a href="#观测性能瓶颈时是什么资源问题" class="headerlink" title="观测性能瓶颈时是什么资源问题"></a>观测性能瓶颈时是什么资源问题</h1><h2 id="观测"><a href="#观测" class="headerlink" title="观测"></a>观测</h2><p>vmstat 1指令 或者top也行</p>
<h3 id="CPU瓶颈判断："><a href="#CPU瓶颈判断：" class="headerlink" title="CPU瓶颈判断："></a>CPU瓶颈判断：</h3><table>
<thead>
<tr>
<th>监控指标</th>
<th>阈值条件</th>
<th>问题描述</th>
</tr>
</thead>
<tbody><tr>
<td><code>us + sy</code></td>
<td>&gt; 0.8 (80%)</td>
<td>CPU 资源紧张</td>
</tr>
<tr>
<td><code>wa</code></td>
<td>&gt; 5%</td>
<td>存在 I&#x2F;O 瓶颈</td>
</tr>
<tr>
<td><code>r</code> (运行队列长度)</td>
<td>&gt; 2 * CPU 核数</td>
<td>进程排队等待 CPU</td>
</tr>
</tbody></table>
<p>us：用户态进程占用CPU百分比</p>
<p>sy：内核态进程占用百分比</p>
<p>id：空闲百分比</p>
<p>wa：IO等待百分比</p>
<p>r：running 正在运行的进程数</p>
<h3 id="内存不足信号"><a href="#内存不足信号" class="headerlink" title="内存不足信号"></a>内存不足信号</h3><p>si&gt;0或so&gt;0  正在使用swap</p>
<p>si swap in</p>
<p>so swap out</p>
<p>原因解析：物理内存不足时，系统会将部分内存数据暂时移动到swap分区，导致性能下降，si&gt;0或so&gt;0导致正在频繁使用swap，是内存不足的明显信号</p>
<p>free持续下降 可能存在内存泄漏</p>
<p>cache很高但是应用慢 手动释放echo</p>
<h3 id="IO性能问题"><a href="#IO性能问题" class="headerlink" title="IO性能问题"></a>IO性能问题</h3><p>wa高+bi&#x2F;bo高</p>
<p>wa CPU等待IO完成的时间百分比<br>bi&#x2F;bo每秒从块设备读取，写入的块数</p>
<p>b&gt;0<br>不可中断睡眠状态的进程数（通常因为IO阻塞）</p>
<h3 id="上下文切换过多"><a href="#上下文切换过多" class="headerlink" title="上下文切换过多"></a>上下文切换过多</h3><p>cs&gt;10000&#x2F;秒&#x2F;核</p>
<p>上下文切换次数，即四核机器&gt;40000就要注意了</p>
<h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><ul>
<li><p>针对1：</p>
<ol>
<li><p>us高，通过top找到高CPU进程，优化算法、减少循环</p>
</li>
<li><p>sy高，减少系统调用（高频文件读写改成批量操作）</p>
</li>
<li><p>wa&gt;5%，结合后面的IO部分处理</p>
</li>
<li><p>r&gt;2*CPU核数，扩容CPU资源，降低进程并发度</p>
</li>
</ol>
</li>
<li><p>针对2：</p>
<ol>
<li><p>情况1：si&#x2F;so &gt; 0（频繁使用Swap）</p>
<p> <strong>紧急处理：</strong></p>
<p> 释放缓存：echo 3 &gt; &#x2F;proc&#x2F;sys&#x2F;vm&#x2F;drop_caches（临时方案）。</p>
<p> 终止非关键进程：kill -9 或 oom-killer 自动处理。</p>
<p> <strong>长期优化：</strong></p>
<p> 扩容物理内存。</p>
<p> 调整Swappiness：sysctl vm.swappiness&#x3D;10（降低Swap倾向）。</p>
<p> 优化应用内存：检查内存泄漏（如 valgrind）、减少缓存大小。</p>
</li>
<li><p>情况2：free持续下降（内存泄漏）</p>
<p> 使用 pmap 或 jmap（Java）分析进程内存分布。</p>
<p> 监控工具：smem、valgrind 定位泄漏代码。</p>
</li>
<li><p>情况3：cache高但应用慢</p>
<p> 手动释放缓存（同上），或优化应用IO模式（如改用直接IO）。</p>
</li>
</ol>
</li>
<li><p>针对3：</p>
<ol>
<li><p>wa高+bi&#x2F;bo高</p>
<p> iotop 查看进程级IO</p>
<p> 使用更快的存储（ssd）</p>
<p> 调整文件系统(ext4换成xfs)</p>
<p> 减少随机写</p>
</li>
<li><p>如果b&gt;0</p>
<p> 检查磁盘健康，分散IO负载</p>
</li>
</ol>
</li>
<li><p>针对4：</p>
<ol>
<li>检查是否因为过多的线程或者频繁的锁竞争，优化代码，降低锁粒度。调整调度策略</li>
</ol>
</li>
</ul>
<h1 id="内存泄漏一般什么场景会出现？"><a href="#内存泄漏一般什么场景会出现？" class="headerlink" title="内存泄漏一般什么场景会出现？"></a>内存泄漏一般什么场景会出现？</h1><ol>
<li>未调用free或者malloc回收</li>
<li>异常抛出后跳过清理代码</li>
<li>共享内存的释放与申请和堆内存不一样，也是要释放的</li>
</ol>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
  </entry>
  <entry>
    <title>lru</title>
    <url>/2025/10/13/lru/</url>
    <content><![CDATA[<p>lru使用了双向链表维护访问顺序，使用哈希表进行了O(1)复杂度的查找</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Node</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> key;</span><br><span class="line">    <span class="type">int</span> value;</span><br><span class="line">    Node* prev;</span><br><span class="line">    Node* next;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Node</span>(<span class="type">int</span> k = <span class="number">0</span>, <span class="type">int</span> v = <span class="number">0</span>) : <span class="built_in">key</span>(k), <span class="built_in">value</span>(v) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LRUCache</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> capacity;</span><br><span class="line">    Node* dummy; <span class="comment">// 哨兵节点</span></span><br><span class="line">    unordered_map&lt;<span class="type">int</span>, Node*&gt; key_to_node;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除一个节点（抽出一本书）</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">remove</span><span class="params">(Node* x)</span> </span>&#123;</span><br><span class="line">        x-&gt;prev-&gt;next = x-&gt;next;</span><br><span class="line">        x-&gt;next-&gt;prev = x-&gt;prev;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在链表头添加一个节点（把一本书放在最上面）</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">push_front</span><span class="params">(Node* x)</span> </span>&#123;</span><br><span class="line">        x-&gt;prev = dummy;</span><br><span class="line">        x-&gt;next = dummy-&gt;next;</span><br><span class="line">        x-&gt;prev-&gt;next = x;</span><br><span class="line">        x-&gt;next-&gt;prev = x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取 key 对应的节点，同时把该节点移到链表头部</span></span><br><span class="line">    <span class="function">Node* <span class="title">get_node</span><span class="params">(<span class="type">int</span> key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">auto</span> it = key_to_node.<span class="built_in">find</span>(key);</span><br><span class="line">        <span class="keyword">if</span> (it == key_to_node.<span class="built_in">end</span>()) &#123; <span class="comment">// 没有这本书</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Node* node = it-&gt;second; <span class="comment">// 有这本书</span></span><br><span class="line">        <span class="built_in">remove</span>(node); <span class="comment">// 把这本书抽出来</span></span><br><span class="line">        <span class="built_in">push_front</span>(node); <span class="comment">// 放在最上面</span></span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">LRUCache</span>(<span class="type">int</span> capacity) : <span class="built_in">capacity</span>(capacity), <span class="built_in">dummy</span>(<span class="keyword">new</span> <span class="built_in">Node</span>()) &#123;</span><br><span class="line">        dummy-&gt;prev = dummy;</span><br><span class="line">        dummy-&gt;next = dummy;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">get</span><span class="params">(<span class="type">int</span> key)</span> </span>&#123;</span><br><span class="line">        Node* node = <span class="built_in">get_node</span>(key); <span class="comment">// get_node 会把对应节点移到链表头部</span></span><br><span class="line">        <span class="keyword">return</span> node ? node-&gt;value : <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">put</span><span class="params">(<span class="type">int</span> key, <span class="type">int</span> value)</span> </span>&#123;</span><br><span class="line">        Node* node = <span class="built_in">get_node</span>(key); <span class="comment">// get_node 会把对应节点移到链表头部</span></span><br><span class="line">        <span class="keyword">if</span> (node) &#123; <span class="comment">// 有这本书</span></span><br><span class="line">            node-&gt;value = value; <span class="comment">// 更新 value</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        key_to_node[key] = node = <span class="keyword">new</span> <span class="built_in">Node</span>(key, value); <span class="comment">// 新书</span></span><br><span class="line">        <span class="built_in">push_front</span>(node); <span class="comment">// 放在最上面</span></span><br><span class="line">        <span class="keyword">if</span> (key_to_node.<span class="built_in">size</span>() &gt; capacity) &#123; <span class="comment">// 书太多了</span></span><br><span class="line">            Node* back_node = dummy-&gt;prev;</span><br><span class="line">            key_to_node.<span class="built_in">erase</span>(back_node-&gt;key);</span><br><span class="line">            <span class="built_in">remove</span>(back_node); <span class="comment">// 去掉最后一本书</span></span><br><span class="line">            <span class="keyword">delete</span> back_node; <span class="comment">// 释放内存</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>alg</category>
      </categories>
  </entry>
  <entry>
    <title>CRTP和内联函数优化虚函数调用</title>
    <url>/2025/10/29/CRTP%E5%92%8C%E5%86%85%E8%81%94%E5%87%BD%E6%95%B0%E4%BC%98%E5%8C%96%E8%99%9A%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8/</url>
    <content><![CDATA[<h1 id="虚函数的开销"><a href="#虚函数的开销" class="headerlink" title="虚函数的开销"></a>虚函数的开销</h1><p>虚函数是C++实现运行时多态的基石，但它确实会带来性能开销：</p>
<ol>
<li>虚函数表（vtable）查找：每次调用虚函数，都需要通过对象的vptr（虚函数表指针）找到vtable，再通过索引找到正确的函数地址，然后进行调用。这比直接函数调用多了一次间接寻址。</li>
<li>无法内联：由于具体调用哪个函数在运行时才能确定，编译器在编译期无法将函数体直接嵌入到调用处，因此无法进行内联优化。内联可以消除函数调用开销，并且为后续优化（如常量传播）打开大门。</li>
<li>缓存不友好：间接跳转可能导致CPU指令缓存预测失败。</li>
</ol>
<h1 id="CRTP"><a href="#CRTP" class="headerlink" title="CRTP"></a>CRTP</h1><p>已经介绍过，<a href="!--swig%EF%BF%BC1--">链接地址</a></p>
<h1 id="内联函数"><a href="#内联函数" class="headerlink" title="内联函数"></a>内联函数</h1><p>其实就是直接静态分派去替代虚函数</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 为不同类型提供特化/重载的函数，而不是类</span></span><br><span class="line"><span class="keyword">namespace</span> processor &#123;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">process</span><span class="params">(<span class="type">const</span> DataA&amp; data)</span> </span>&#123; <span class="comment">/* 针对A的优化实现 */</span> &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">process</span><span class="params">(<span class="type">const</span> DataB&amp; data)</span> </span>&#123; <span class="comment">/* 针对B的优化实现 */</span> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 std::variant 或 if-constexpr 进行分派</span></span><br><span class="line"><span class="keyword">using</span> DataVariant = std::variant&lt;DataA, DataB&gt;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方式1：使用std::visit (编译时分派)</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">process_heterogeneous_list</span><span class="params">(<span class="type">const</span> std::vector&lt;DataVariant&gt;&amp; data_list)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span>&amp; item : data_list) &#123;</span><br><span class="line">        <span class="comment">// 使用 std::visit 在运行时根据 item 实际存储的类型来分派</span></span><br><span class="line">        std::<span class="built_in">visit</span>([](<span class="type">const</span> <span class="keyword">auto</span>&amp; d) &#123;</span><br><span class="line">            processor::<span class="built_in">process</span>(d); <span class="comment">// 这里会发生编译时分派！</span></span><br><span class="line">        &#125;, item);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方式2：如果类型在编译期已知，直接调用（最强优化）</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> DataType&gt;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">hot_loop</span><span class="params">(<span class="type">const</span> std::vector&lt;DataType&gt;&amp; data_list)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span>&amp; item : data_list) &#123;</span><br><span class="line">        processor::<span class="built_in">process</span>(item); <span class="comment">// 直接调用，100%可内联</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>该方法有效地消除了函数调用开销。第一种方法是这个vector里可能有不同类型，第二种方法是这个vector里只有一种类型</p>
]]></content>
      <categories>
        <category>cpp</category>
      </categories>
  </entry>
  <entry>
    <title>Name Mangling</title>
    <url>/2025/10/11/name-mangling/</url>
    <content><![CDATA[<h1 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h1><p>解决函数重载的符号冲突，保持类型安全，区分作用域，模板实例化的区分</p>
<p>ABI规范定义了name mangling规则，确保了同一ABI的编译器能够互相链接。</p>
<p>由于C++支持重载，所以编译器要对函数名进行命名，但是MSVC和MINGW编译器的命名方法不同，会导致跨编译器编译出错，所以需要在代码上进行兼容。</p>
<h1 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ImageSourceModuleAPI.h</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> IMAGESOURCEMODULE_API_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IMAGESOURCEMODULE_API_H</span></span><br><span class="line"><span class="comment">// DLL导出宏定义</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> IMAGESOURCEMODULE_DLL_EXPORTS</span></span><br><span class="line">    <span class="meta">#<span class="keyword">define</span> IMAGESOURCEMODULE_DLL_API __declspec(dllexport)</span></span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">    <span class="meta">#<span class="keyword">define</span> IMAGESOURCEMODULE_DLL_API __declspec(dllimport)</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="comment">// 前向声明</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CAbstractUserModule</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> __cplusplus</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"> <span class="comment">// 采用__stdcall调用约定，且须在.def文件中增加接口描述。</span></span><br><span class="line"> <span class="function">IMAGESOURCEMODULE_DLL_API CAbstractUserModule* __stdcall <span class="title">CreateModule</span><span class="params">(<span class="type">void</span>* hModule)</span></span>;</span><br><span class="line"> <span class="function">IMAGESOURCEMODULE_DLL_API <span class="type">void</span> __stdcall <span class="title">DestroyModule</span><span class="params">(<span class="type">void</span>* hModule, CAbstractUserModule* pUserModule)</span></span>;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> __cplusplus</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">// IMAGESOURCEMODULE_API_H</span></span></span><br></pre></td></tr></table></figure>

<p>这种属于是extern “C”的方法，还有一种方法是在def文件里声明：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">; ImageSourceModule.def</span><br><span class="line">EXPORTS</span><br><span class="line">CreateModule</span><br><span class="line">DestroyModule</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>cpp</category>
      </categories>
  </entry>
  <entry>
    <title>muduo</title>
    <url>/2025/10/14/muduo/</url>
    <content><![CDATA[<h1 id="项目总结"><a href="#项目总结" class="headerlink" title="项目总结"></a>项目总结</h1><h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><p>模拟muduo网络库，用C++11的新特性实现了非阻塞IO复用的高并发TCP服务器模型核心（TCPServer），用C++11的新特性取代了Boost，同时提升了Buffer等组件的性能，实现了0第三方库的依赖，仅需linux内核支持。</p>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><ul>
<li>整体采用non-blocking+IO-multiplexing+loop线程的设计框架，其中线程模型采用one loop per thread的多线程服务端网络编程模型，结合Reactor模型进行实现。<br>其中主Reactor（1线程）专职于accept()，同时采用EPOLLEXCLUSIVE避免惊群。子Reactor（N默认等于CPU核心数），轮询处理已连接的客户端数据。</li>
<li>去掉了Muduo库中的Boost依赖，使用C++11的标准：<ol>
<li>使用了智能指针：unique，shared，weak对Poller，Channel等的内存资源释放，对TcpConnection建立和Channel绑定等</li>
<li>使用atomic原子操作类型对状态量进行保护，用unique_lock替代lock_guard</li>
</ol>
</li>
<li>缓冲区参照Netty设计，使用prepend，read和write三个指针的设计，划分缓冲区数据</li>
<li>日志系统采用同步输出方式，使用snprintf进行INFO、DEBUG、ERROR、FATAL四个等级的格式化输出…</li>
<li>使用开发的网络库实现了EchoServer</li>
</ul>
<span id="more"></span>

<h1 id="概念介绍"><a href="#概念介绍" class="headerlink" title="概念介绍"></a>概念介绍</h1><h2 id="Reactor模型"><a href="#Reactor模型" class="headerlink" title="Reactor模型"></a>Reactor模型</h2><p>Reactor模型是一种事件驱动的并发编程模型，主要用于处理大量并发IO操作。</p>
<h3 id="基本工作流程"><a href="#基本工作流程" class="headerlink" title="基本工作流程"></a>基本工作流程</h3><ol>
<li>注册感兴趣的事件（读就绪，写就绪事件）</li>
<li>Reactor（事件分发器）监听所有注册的事件</li>
<li>事件发生时，Reactor分发给相应的Handler（事件处理器）</li>
<li>事件处理器执行具体的业务逻辑</li>
</ol>
<h3 id="主要组件"><a href="#主要组件" class="headerlink" title="主要组件"></a>主要组件</h3><ul>
<li><p>Reactor</p>
<p>事件分发器，使用了多路IO复用技术比如select，poll，epoll</p>
</li>
<li><p>Handlers</p>
<p>事件处理器，比如Acceptor，ReadHandler</p>
</li>
<li><p>Demultiplexer</p>
<p>多路分发器，比如epoll</p>
</li>
</ul>
<h2 id="阻塞和非阻塞IO"><a href="#阻塞和非阻塞IO" class="headerlink" title="阻塞和非阻塞IO"></a>阻塞和非阻塞IO</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><ul>
<li><p>阻塞IO</p>
<p>当进程发起IO操作时，进程会被挂起，直到操作完成才返回</p>
<p>在等待期间，进程不能执行其他任务</p>
</li>
<li><p>非阻塞IO</p>
<p>当进程发起IO操作时，立即返回，不管操作是否完成</p>
<p>进程需要主动检查操作是否完成</p>
</li>
</ul>
<h3 id="具体例子"><a href="#具体例子" class="headerlink" title="具体例子"></a>具体例子</h3><ul>
<li><p>阻塞</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 阻塞模式下的 read 操作</span></span><br><span class="line"><span class="type">int</span> sockfd = <span class="built_in">socket</span>(AF_INET, SOCK_STREAM, <span class="number">0</span>);</span><br><span class="line"><span class="comment">// ... 连接设置 ...</span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span> buffer[<span class="number">1024</span>];</span><br><span class="line"><span class="type">int</span> n = <span class="built_in">read</span>(sockfd, buffer, <span class="built_in">sizeof</span>(buffer));  <span class="comment">// 阻塞直到有数据或出错</span></span><br><span class="line"><span class="comment">// 只有当有数据可读时，read 才会返回</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>非阻塞</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 设置为非阻塞模式</span></span><br><span class="line"><span class="type">int</span> flags = <span class="built_in">fcntl</span>(sockfd, F_GETFL, <span class="number">0</span>);</span><br><span class="line"><span class="built_in">fcntl</span>(sockfd, F_SETFL, flags | O_NONBLOCK);</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> buffer[<span class="number">1024</span>];</span><br><span class="line"><span class="type">int</span> n = <span class="built_in">read</span>(sockfd, buffer, <span class="built_in">sizeof</span>(buffer));</span><br><span class="line"><span class="keyword">if</span> (n &lt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (errno == EAGAIN || errno == EWOULDBLOCK) &#123;</span><br><span class="line">        <span class="comment">// 暂时没有数据可读，需要稍后重试</span></span><br><span class="line">        <span class="comment">// 程序可以去做其他事情</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 真正的错误</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 成功读取 n 字节数据</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="同步和异步IO"><a href="#同步和异步IO" class="headerlink" title="同步和异步IO"></a>同步和异步IO</h2><h3 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h3><ul>
<li><p>同步IO</p>
<p>应用程序主动等待IO操作完成</p>
<p>IO操作期间，应用程序被阻塞或需要主动检查</p>
</li>
<li><p>异步IO</p>
<p>应用程序发起IO操作后立即返回</p>
<p>由内核在IO操作完成后通知应用程序</p>
</li>
</ul>
<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><h2 id="项目问题"><a href="#项目问题" class="headerlink" title="项目问题"></a>项目问题</h2><h3 id="Reactor模型是如何体现的"><a href="#Reactor模型是如何体现的" class="headerlink" title="Reactor模型是如何体现的"></a>Reactor模型是如何体现的</h3><p>Reactor模型的核心组成就是reactor，handlers和demultiplexer，其中：</p>
<p>Reactor对应的是Eventloop</p>
<p>handlers对应的是channel类，分装了文件描述符和处理回调函数</p>
<p>demultiplexer对应的就是epoller，监听所有的channel</p>
<h3 id="工作流程"><a href="#工作流程" class="headerlink" title="工作流程"></a>工作流程</h3><ul>
<li>Acceptor（维护的是主Reactor）监听新连接，当新连接到达时，Acceptor创建一个Tcpconnection对象，轮询注册到一个SubReactor的EpollPoller中。</li>
<li>Subloop通过Epoll监听套接字是否有事件触发，如果有，EpollPoller返回活跃的Channel，EventLoop主动调用Channel的HandleEvent去执行对应回调。</li>
<li>Channel回调函数是用户设置的，实现了业务逻辑的解耦。</li>
</ul>
<p>Muduo属于多Reactor多线程设计，一个主Reactor+N个子Reactor。工作流程中，主Reactor通过轮询把新连接分配给子Reactor中，子Reactor通过EpollPoller监听事件并触发Channel回调，实现高并发处理。</p>
<h3 id="为什么选择one-loop-per-thread模型"><a href="#为什么选择one-loop-per-thread模型" class="headerlink" title="为什么选择one loop per thread模型"></a>为什么选择one loop per thread模型</h3><p>这个模型是一种常见的并发网络编程模式，他有四个优点：<br>       1. 简化并发编程，每个线程独立运行自己的事件循环。<br>       2. 减少锁竞争，事件处理在单个线程内完成<br>       3. 不同连接由不同线程处理，一个连接的问题不会影响其他连接<br>       4. 每个线程可以绑定不同的CPU核心</p>
<h3 id="使用这个网络库可以做什么？"><a href="#使用这个网络库可以做什么？" class="headerlink" title="使用这个网络库可以做什么？"></a>使用这个网络库可以做什么？</h3><p>TCP长连接服务，比如即时通讯、聊天服务器、金融交易系统、代理服务器</p>
<h3 id="实现一个服务器需要考虑哪些？"><a href="#实现一个服务器需要考虑哪些？" class="headerlink" title="实现一个服务器需要考虑哪些？"></a>实现一个服务器需要考虑哪些？</h3><ol>
<li><p>线程模型的设计</p>
<p>one loop per thread</p>
<p>如何实现跨线程调用？</p>
<p>跨线程调用的安全方案为：外部线程通过<code>runInLoop()</code>方法提交任务，任务被加入队列并唤醒事件循环.EventLoop在下次迭代中处理队列任务。使用<code>wakeupfd</code>实现跨线程唤醒，即发送一个单字节数据。</p>
</li>
<li><p>协议处理</p>
<p>PLC HTTP处理</p>
</li>
<li><p>性能优化</p>
<p>负载均衡算法</p>
</li>
<li><p>连接生命周期</p>
<p>muduo库中的TcpConnection继承自enable_shared_from_this，使用shared_ptr进行生命周期的管理。</p>
<p>TcpServer这里创建的是shared_ptr的TCPconnection，拥有主要的所有权；连接建立时，Channel只持有弱引用，观察还是否存在。用户回调只会获得临时的shared_ptr（如果存在即tie_.lock()临时提升，提升后出了作用域引用计数则-1）。</p>
<p>为什么要这么做？因为tcpconnector的回调传给channel，但是channel调用的时候tcpconnector可能已经被destroy了。</p>
</li>
</ol>
<h3 id="如何分配子Reactor，轮询算法用到了什么负载均衡算法"><a href="#如何分配子Reactor，轮询算法用到了什么负载均衡算法" class="headerlink" title="如何分配子Reactor，轮询算法用到了什么负载均衡算法"></a>如何分配子Reactor，轮询算法用到了什么负载均衡算法</h3><ol>
<li>轮询分配 按顺序依次分配</li>
<li>加权分配 根据子Reactor的处理能力分配不同权重（CPU不同核心访问内存速度不一定一样）</li>
<li>最少连接数 分配给当前连接数最少的线程</li>
</ol>
<h3 id="为什么使用多线程而不是多进程？"><a href="#为什么使用多线程而不是多进程？" class="headerlink" title="为什么使用多线程而不是多进程？"></a>为什么使用多线程而不是多进程？</h3><p>线程更轻量，性能和资源开销更小；数据共享（连接状态和上下文）和通信效率更高；更适配reactor模型。</p>
<h2 id="核心模块实现细节"><a href="#核心模块实现细节" class="headerlink" title="核心模块实现细节"></a>核心模块实现细节</h2><h3 id="Channel"><a href="#Channel" class="headerlink" title="Channel"></a>Channel</h3><h4 id="Channel如何与Eventloop和Epollpoller交互？"><a href="#Channel如何与Eventloop和Epollpoller交互？" class="headerlink" title="Channel如何与Eventloop和Epollpoller交互？"></a>Channel如何与Eventloop和Epollpoller交互？</h4><p>Epollpoller和eventloop里都维护了channel，eventloop轮询时调用epollwait，每一轮返回有事件的fd，通过维护的map，和fd，获取到对应的channel，eventloop直接触发对应channel的回调handleevent</p>
<h4 id="如何处理不同的事件类型？（读写错误等等）"><a href="#如何处理不同的事件类型？（读写错误等等）" class="headerlink" title="如何处理不同的事件类型？（读写错误等等）"></a>如何处理不同的事件类型？（读写错误等等）</h4><p>Channel首先通过enableRead、enableWrite等方法处理可读可写事件，设置为感兴趣事件，返回时通过revent确定具体事件类型，在handleevent函数中，选择对应的分支选择对应的函数进行处理</p>
<h3 id="Epollpoller"><a href="#Epollpoller" class="headerlink" title="Epollpoller"></a>Epollpoller</h3><h4 id="epoll对比poll和select的优势是什么？"><a href="#epoll对比poll和select的优势是什么？" class="headerlink" title="epoll对比poll和select的优势是什么？"></a>epoll对比poll和select的优势是什么？</h4><ol>
<li>时间复杂度低，只返回就绪的fd</li>
<li>连接较多时，性能更加稳定</li>
<li>监控的fd上限仅受系统内存限制</li>
</ol>
<h4 id="epoll的LT和ET你选择了哪种，优势是什么？"><a href="#epoll的LT和ET你选择了哪种，优势是什么？" class="headerlink" title="epoll的LT和ET你选择了哪种，优势是什么？"></a>epoll的LT和ET你选择了哪种，优势是什么？</h4><p>  LT，只要fd处于就绪状态就会持续通知，开发简易性优先的场景，不容易遗漏事件。但是要注意在数据量大的时候主动开关epollout。</p>
<h3 id="EventLoop"><a href="#EventLoop" class="headerlink" title="EventLoop"></a>EventLoop</h3><h4 id="loop工作流程是什么？"><a href="#loop工作流程是什么？" class="headerlink" title="loop工作流程是什么？"></a>loop工作流程是什么？</h4><ol>
<li>事件收集 通过系统调用（比如epoll_wait）收集所有就绪的IO事件，返回后填充活跃Channel列表</li>
<li>事件分发 遍历每个活跃的Channel，调用每个Channel的handleEvent方法，Channel根据具体事件调用注册的回调</li>
<li>异步任务 执行其他线程提交到本线程的任务</li>
</ol>
<h4 id="如何实现跨线程调用？（如何保证线程安全？）"><a href="#如何实现跨线程调用？（如何保证线程安全？）" class="headerlink" title="如何实现跨线程调用？（如何保证线程安全？）"></a>如何实现跨线程调用？（如何保证线程安全？）</h4><p>首先介绍一下Muduo核心的线程模型：One Loop Per Thread，即每个EventLoop对象严格绑定一个特定的线程。</p>
<p>跨线程调用的安全方案为：外部线程通过runInLoop()方法提交任务，任务被加入队列并唤醒事件循环，EventLoop在下次迭代中处理队列任务。使用wakeupfd实现跨线程唤醒，即发送一个单字节数据。</p>
<h3 id="TcpConnection"><a href="#TcpConnection" class="headerlink" title="TcpConnection"></a>TcpConnection</h3><h4 id="连接的生命周期如何管理？"><a href="#连接的生命周期如何管理？" class="headerlink" title="连接的生命周期如何管理？"></a>连接的生命周期如何管理？</h4><p>muduo库中的TcpConnection继承自enable_shared_from_this，使用shared_ptr进行生命周期的管理。</p>
<p>TcpServer这里创建的是shared_ptr的TCPconnection，拥有主要的所有权；连接建立时，Channel只持有弱引用，观察还是否存在。用户回调只会获得临时的shared_ptr（如果存在即tie_.lock()临时提升，提升后出了作用域引用计数则-1）。</p>
<h4 id="为何使用shared-ptr"><a href="#为何使用shared-ptr" class="headerlink" title="为何使用shared_ptr?"></a>为何使用shared_ptr?</h4><ol>
<li>tcpserver拥有shared_ptr是为了保证服务运行期间持续存活，避免意外提前释放。</li>
<li>与之配合的weak_ptr能有效地避免在调用回调时已经被释放。</li>
</ol>
<h3 id="Buffer设计"><a href="#Buffer设计" class="headerlink" title="Buffer设计"></a>Buffer设计</h3><h4 id="为什么采用三个指针，各自的作用是什么？"><a href="#为什么采用三个指针，各自的作用是什么？" class="headerlink" title="为什么采用三个指针，各自的作用是什么？"></a>为什么采用三个指针，各自的作用是什么？</h4><p>BUffer的三个指针分别是readerIndex&#x2F;writerIndex&#x2F;以及首尾指针。</p>
<p>读指针标记已接收但是还没被应用层消费的数据，写指针标记可写内存区域的起始位置。</p>
<p>在读缓冲区，读指针是待处理数据的起始位置，写指针是新数据追加位置；而在写缓冲区，读指针是待发送数据的起始位置，写指针是新数据追加位置。</p>
<h4 id="如何实现高效的数据读写？"><a href="#如何实现高效的数据读写？" class="headerlink" title="如何实现高效的数据读写？"></a>如何实现高效的数据读写？</h4><ol>
<li>减少内存拷贝的优化<br> 直接暴露内部指针给用户，避免数据拷贝。<br> 使用readv&#x2F;writev，单次系统调用填充多个缓冲区，当主缓冲区空间不足时，自动使用栈上的缓冲区。</li>
<li>动态扩容<br> 如果可以先优化Buffer内的内存分配，如果还是不够再扩容，可以考虑指数增长。</li>
</ol>
<h2 id="C-11特性应用"><a href="#C-11特性应用" class="headerlink" title="C++11特性应用"></a>C++11特性应用</h2><ol>
<li><p>你用了哪些智能指针 为什么在这些场景下用这些特定的智能指针？</p>
<p> unique_ptr、shared_ptr以及weak_ptr都用到了。</p>
<p> unique_ptr用到的地方比较多，比如tcpconnector的channel、socket；tcpserver里的acceptor；eventloop里的poller、wake_channel等<br> shared_ptr和weak_ptr成对使用，tcpserver新建tcpconnection时用的是shared_ptr，但是channel使用weakptr去接收tcpconnection，因为Channel持有tcpconnection的引用，但是tcpconnection拥有channel的所有权，会出现循环引用</p>
</li>
<li><p>atomic和mutex的选择标准是什么？</p>
<p> 优先选择atomic的情况：1. 简单的数据类型 2. 仅需保证单个变量的原子性 3. 没有依赖关系 4. 高频操作<br> 局限在不支持多变量同步或者符合变量</p>
<p> 优先选择mutex：1. 复杂数据结构，比如map vector 2. 多变量操作 3. 可以配合条件变量，执行复杂逻辑<br> 局限在可能引发死锁</p>
</li>
<li><p>C++11的移动语义在你的项目中有什么应用？</p>
<p> 回调函数的赋值操作使用到了move</p>
</li>
<li><p>当TcpConnection被多线程持有，shared_from_this在析构中调用是否安全？</p>
<p> 不安全，此时引用计数可能已经变成0了。在析构中如果一定需要用，需要加一个weak_ptr的判断，不过根本原则是在析构函数中禁止调用。</p>
</li>
</ol>
<h2 id="项目经验"><a href="#项目经验" class="headerlink" title="项目经验"></a>项目经验</h2><ol>
<li><p>在实现过程中遇到的最大挑战，如何解决的？</p>
<p> 多线程下TcpConnection对象在IO线程和业务线程间共享，会不会出现这么一个问题：IO线程在发送数据的时候，业务线程想要delete conn这样会导致崩溃。<br> 所以考虑使用shared_ptr和weak_ptr配合使用。即在进行操作时（无论是handleclose韩式handleread等操作），线程都使用weakptr去接收Tcpconnection，如果此时还存在则升级到shared_ptr进行操作，操作结束后引用计数自动-1，避免了对象提前被析构的问题。所有的销毁操作都延迟到IO线程中的事件循环中去执行。</p>
</li>
<li><p>如果让你继续优化这个项目，你会从哪些方面着手？</p>
<p> 日志库的添加；现在只有IO线程和简单的工作线程，考虑添加其他复杂的工作线程。</p>
</li>
<li><p>从muduo源码中你能学到哪些优秀的代码设计？</p>
<p> Reactor模式的高效实现；多Reactor线程模型；对象生命周期的控制；Buffer的设计；跨线程的任务提交；接口设计和函数命名</p>
</li>
</ol>
<h2 id="网络编程基础"><a href="#网络编程基础" class="headerlink" title="网络编程基础"></a>网络编程基础</h2><ol>
<li><p>TCP服务器的基本工作流程</p>
<p> 创建监听套接字-&gt;创建事件监听器-&gt;事件循环-&gt;处理新连接-&gt;处理IO-&gt;关闭连接</p>
</li>
<li><p>非阻塞IO相比阻塞IO的优势和劣势</p>
<p> 优点：1. 高并发 2. 资源利用率高 3. 响应速度更快 4. 避免线程阻塞<br> 缺点：1. 编程复杂度高 2. 调试困难 3. 持续重试读写导致的CPU空转风险</p>
</li>
</ol>
]]></content>
      <categories>
        <category>proj</category>
      </categories>
  </entry>
  <entry>
    <title>汤圆照片1</title>
    <url>/2025/10/09/dog1/</url>
    <content><![CDATA[<p><img src="/2025/10/09/dog1/mmexport1758010068100.jpg" alt="mmexport1758010068100"><img src="/2025/10/09/dog1/wx_camera_1746437946351.jpg" alt="mmexport1758644956147"></p>
<p><img src="/2025/10/09/dog1/mmexport1758644956147-1760019802395-4.jpg" alt="mmexport1758644956147"></p>
<p><img src="/2025/10/09/dog1/mmexport1755166237687.jpg" alt="mmexport1755166237687"></p>
<p><img src="/2025/10/09/dog1/mmexport1738400799164.jpg" alt="mmexport1738400799164"></p>
<p><img src="/2025/10/09/dog1/wx_camera_1746437958267.jpg" alt="wx_camera_1746437958267"></p>
<p><img src="/2025/10/09/dog1/mmexport1730730606474.jpg" alt="mmexport1730730606474"></p>
<p><img src="/2025/10/09/dog1/mmexport1740107638540.jpg" alt="mmexport1740107638540"></p>
<p><img src="/2025/10/09/dog1/mmexport1744455600276.jpg" alt="mmexport1744455600276"></p>
]]></content>
      <categories>
        <category>pets</category>
      </categories>
  </entry>
  <entry>
    <title>packaged_task</title>
    <url>/2025/10/13/packaged-task/</url>
    <content><![CDATA[<p><code>packaged_task</code> 是 C++11 引入的一个重要组件，它可以将可调用对象（函数、lambda、函数对象等）包装起来，并将其返回值与一个 <code>future</code> 对象关联，从而方便地获取异步操作的结果。</p>
<h1 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 包装普通函数</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">packaged_task&lt;<span class="title">int</span><span class="params">(<span class="type">int</span>, <span class="type">int</span>)</span>&gt; <span class="title">task</span><span class="params">(add)</span></span>;</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h1 id="执行任务"><a href="#执行任务" class="headerlink" title="执行任务"></a>执行任务</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 在另一个线程中执行</span></span><br><span class="line"><span class="function">thread <span class="title">t</span><span class="params">(move(task), <span class="number">10</span>, <span class="number">20</span>)</span></span>;</span><br><span class="line">t.<span class="built_in">join</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取结果</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Result: &quot;</span> &lt;&lt; result.<span class="built_in">get</span>() &lt;&lt; endl; <span class="comment">// 输出: Result: 30</span></span><br></pre></td></tr></table></figure>

<h1 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h1><h2 id="移动语义"><a href="#移动语义" class="headerlink" title="移动语义"></a>移动语义</h2><p>智能移动不能复制</p>
<h2 id="重置任务"><a href="#重置任务" class="headerlink" title="重置任务"></a>重置任务</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">packaged_task&lt;<span class="title">int</span><span class="params">()</span>&gt; <span class="title">task</span><span class="params">([]&#123; <span class="keyword">return</span> <span class="number">42</span>; &#125;)</span></span>;</span><br><span class="line"><span class="built_in">task</span>(); <span class="comment">// 第一次执行</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 任务已执行，需要重置才能再次使用</span></span><br><span class="line">task.<span class="built_in">reset</span>(); <span class="comment">// 重置任务状态</span></span><br><span class="line">future&lt;<span class="type">int</span>&gt; fut2 = task.<span class="built_in">get_future</span>();</span><br><span class="line"><span class="built_in">task</span>(); <span class="comment">// 可以再次执行</span></span><br></pre></td></tr></table></figure>

<h1 id="类型擦除"><a href="#类型擦除" class="headerlink" title="类型擦除"></a>类型擦除</h1><p>可以看线程池一文的第二种实现方法</p>
]]></content>
      <categories>
        <category>cpp</category>
      </categories>
  </entry>
  <entry>
    <title>wireshark操作简述</title>
    <url>/2025/10/13/wireshark%E6%93%8D%E4%BD%9C%E7%AE%80%E8%BF%B0/</url>
    <content><![CDATA[<p>Wireshark是一个网络协议分析工具，可以捕获并分析数据包</p>
<h1 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h1><h2 id="基于协议的过滤"><a href="#基于协议的过滤" class="headerlink" title="基于协议的过滤"></a>基于协议的过滤</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 显示所有TCP数据包</span><br><span class="line">tcp</span><br><span class="line"></span><br><span class="line"># 显示所有UDP数据包</span><br><span class="line">udp</span><br><span class="line"></span><br><span class="line"># 显示所有HTTP数据包</span><br><span class="line">http</span><br><span class="line"></span><br><span class="line"># 显示所有DNS数据包</span><br><span class="line">dns</span><br><span class="line"></span><br><span class="line"># 显示所有HTTPS数据包</span><br><span class="line">ssl or tls</span><br><span class="line"></span><br><span class="line"># 显示所有FTP数据包</span><br><span class="line">ftp</span><br></pre></td></tr></table></figure>

<h2 id="基于IP地址的过滤"><a href="#基于IP地址的过滤" class="headerlink" title="基于IP地址的过滤"></a>基于IP地址的过滤</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 显示来自或发送到特定IP的数据包</span><br><span class="line">ip.addr == 192.168.1.100</span><br><span class="line"></span><br><span class="line"># 显示来自特定源IP的数据包</span><br><span class="line">ip.src == 192.168.1.100</span><br><span class="line"></span><br><span class="line"># 显示发送到特定目标IP的数据包</span><br><span class="line">ip.dst == 8.8.8.8</span><br><span class="line"></span><br><span class="line"># 显示源IP和目标IP之间的通信</span><br><span class="line">ip.src == 192.168.1.100 and ip.dst == 8.8.8.8</span><br><span class="line"></span><br><span class="line"># 显示与特定网络段相关的数据包</span><br><span class="line">ip.addr &gt;= 192.168.1.0 and ip.addr &lt;= 192.168.1.255</span><br></pre></td></tr></table></figure>

<h2 id="基于端口号的过滤"><a href="#基于端口号的过滤" class="headerlink" title="基于端口号的过滤"></a>基于端口号的过滤</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 显示特定端口的数据包</span><br><span class="line">tcp.port == 80</span><br><span class="line"></span><br><span class="line"># 显示特定源端口的数据包</span><br><span class="line">tcp.srcport == 80</span><br><span class="line"></span><br><span class="line"># 显示特定目标端口的数据包</span><br><span class="line">tcp.dstport == 443</span><br><span class="line"></span><br><span class="line"># 显示多个端口的数据包</span><br><span class="line">tcp.port == 80 or tcp.port == 443 or tcp.port == 8080</span><br><span class="line"></span><br><span class="line"># 显示端口范围</span><br><span class="line">tcp.port &gt;= 80 and tcp.port &lt;= 100</span><br></pre></td></tr></table></figure>

<h2 id="基于HTTP的过滤"><a href="#基于HTTP的过滤" class="headerlink" title="基于HTTP的过滤"></a>基于HTTP的过滤</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 显示所有HTTP请求</span><br><span class="line">http.request</span><br><span class="line"></span><br><span class="line"># 显示所有HTTP响应</span><br><span class="line">http.response</span><br><span class="line"></span><br><span class="line"># 显示特定HTTP方法的请求</span><br><span class="line">http.request.method == &quot;GET&quot;</span><br><span class="line">http.request.method == &quot;POST&quot;</span><br><span class="line">http.request.method == &quot;PUT&quot;</span><br><span class="line">http.request.method == &quot;DELETE&quot;</span><br><span class="line"></span><br><span class="line"># 显示包含特定字符串的HTTP数据包</span><br><span class="line">http contains &quot;login&quot;</span><br><span class="line"></span><br><span class="line"># 显示特定User-Agent的请求</span><br><span class="line">http.user_agent contains &quot;Mozilla&quot;</span><br><span class="line"></span><br><span class="line"># 显示特定主机的HTTP流量</span><br><span class="line">http.host == &quot;www.example.com&quot;</span><br><span class="line"></span><br><span class="line"># 显示特定状态码的HTTP响应</span><br><span class="line">http.response.code == 200</span><br><span class="line">http.response.code == 404</span><br><span class="line">http.response.code == 500</span><br></pre></td></tr></table></figure>

<h2 id="组合过滤"><a href="#组合过滤" class="headerlink" title="组合过滤"></a>组合过滤</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># AND操作：同时满足两个条件</span><br><span class="line">tcp.port == 80 and ip.src == 192.168.1.100</span><br><span class="line"></span><br><span class="line"># OR操作：满足其中一个条件</span><br><span class="line">tcp.port == 80 or tcp.port == 443</span><br><span class="line"></span><br><span class="line"># NOT操作：不满足条件</span><br><span class="line">not tcp.port == 80</span><br><span class="line"></span><br><span class="line"># 复杂组合</span><br><span class="line">(tcp.port == 80 or tcp.port == 443) and ip.addr == 192.168.1.100</span><br><span class="line"></span><br><span class="line"># 使用括号控制优先级</span><br><span class="line">(tcp.srcport == 80 and ip.dst == 192.168.1.1) or (tcp.dstport == 80 and ip.src == 192.168.1.1)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>cn</category>
      </categories>
  </entry>
  <entry>
    <title>传输层</title>
    <url>/2025/10/12/%E4%BC%A0%E8%BE%93%E5%B1%82/</url>
    <content><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>传输层位于网络层和应用层之间，为不同主机上的应用进程提供了逻辑通信功能</p>
<ul>
<li><p>端口号</p>
<p>唯一标识一台主机上的特定应用进程，16位整数</p>
</li>
</ul>
<h1 id="UDP"><a href="#UDP" class="headerlink" title="UDP"></a>UDP</h1><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a><strong>特点</strong></h2><ul>
<li><strong>无连接</strong>：无需建立连接即可发送数据。</li>
<li><strong>不可靠</strong>：不保证数据交付、不保证顺序、不具备拥塞控制。</li>
<li><strong>高效</strong>：头部开销小，延迟低。</li>
</ul>
<h2 id="报文格式"><a href="#报文格式" class="headerlink" title="报文格式"></a>报文格式</h2><p>UDP头部固定为<strong>8字节</strong>。</p>
<table>
<thead>
<tr>
<th align="left">字段</th>
<th align="left">长度</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">源端口号</td>
<td align="left">16位</td>
<td align="left">发送方端口号（可省略为0）</td>
</tr>
<tr>
<td align="left">目的端口号</td>
<td align="left">16位</td>
<td align="left">接收方端口号</td>
</tr>
<tr>
<td align="left">长度</td>
<td align="left">16位</td>
<td align="left">UDP整个数据报（头部+数据）的长度</td>
</tr>
<tr>
<td align="left">校验和</td>
<td align="left">16位</td>
<td align="left">用于差错检测（可选）</td>
</tr>
</tbody></table>
<h1 id="TCP"><a href="#TCP" class="headerlink" title="TCP"></a>TCP</h1><p>TCP是面向连接的、可靠的、基于字节流的传输层通信协议。</p>
<h2 id="TCP报文格式"><a href="#TCP报文格式" class="headerlink" title="TCP报文格式"></a>TCP报文格式</h2><p>TCP头部<strong>最小20字节</strong>，最大60字节（因选项字段长度可变）。</p>
<p><strong>固定头部（20字节）</strong>：</p>
<table>
<thead>
<tr>
<th align="left">字段</th>
<th align="left">长度</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">源端口号</td>
<td align="left">16位</td>
<td align="left">发送方端口号</td>
</tr>
<tr>
<td align="left">目的端口号</td>
<td align="left">16位</td>
<td align="left">接收方端口号</td>
</tr>
<tr>
<td align="left"><strong>序列号</strong></td>
<td align="left">32位</td>
<td align="left">本报文段所发送数据的第一个字节的序号</td>
</tr>
<tr>
<td align="left"><strong>确认应答号</strong></td>
<td align="left">32位</td>
<td align="left">期望收到的下一个报文段的第一个数据字节的序号</td>
</tr>
<tr>
<td align="left"><strong>首部长度</strong></td>
<td align="left">4位</td>
<td align="left">以4字节为单位，指示TCP头部长度</td>
</tr>
<tr>
<td align="left"><strong>保留位</strong></td>
<td align="left">6位</td>
<td align="left">保留为未来使用</td>
</tr>
<tr>
<td align="left"><strong>控制标志</strong></td>
<td align="left">6位</td>
<td align="left">见下表详解</td>
</tr>
<tr>
<td align="left"><strong>窗口大小</strong></td>
<td align="left">16位</td>
<td align="left">用于流量控制，指示接收方还能接收的字节数</td>
</tr>
<tr>
<td align="left"><strong>校验和</strong></td>
<td align="left">16位</td>
<td align="left">用于差错检测</td>
</tr>
<tr>
<td align="left"><strong>紧急指针</strong></td>
<td align="left">16位</td>
<td align="left">当URG&#x3D;1时有效，指示紧急数据的末尾</td>
</tr>
</tbody></table>
<p><strong>控制标志（各占1位）</strong>：</p>
<ul>
<li><strong>URG</strong>：紧急指针有效。</li>
<li><strong>ACK</strong>：确认号有效。<strong>一旦连接建立，该位通常始终为1</strong>。</li>
<li><strong>PSH</strong>：接收方应尽快将数据交付应用层。</li>
<li><strong>RST</strong>：重置连接。</li>
<li><strong>SYN</strong>：同步序列号，用于<strong>建立连接</strong>。</li>
<li><strong>FIN</strong>：结束连接，用于<strong>释放连接</strong>。</li>
</ul>
<p><strong>可选字段</strong>：常见选项包括MSS（最大报文段长度）、窗口缩放因子、时间戳等。</p>
<h2 id="序列号与确认应答机制"><a href="#序列号与确认应答机制" class="headerlink" title="序列号与确认应答机制"></a>序列号与确认应答机制</h2><ul>
<li><strong>序列号</strong>：标识发送数据流中每一个字节的编号。初始序列号随机生成，后续序列号按已发送的字节数递增。例如，发送seq&#x3D;1000，数据长度为200，则下一个报文seq&#x3D;1200。</li>
<li><strong>确认应答号</strong>：当ACK标志位为1时有效。它向发送方声明期望收到的下一个字节的序列号。例如，收到seq&#x3D;1000，数据长度为150字节，则回复ack&#x3D;1150。<strong>确认应答号代表此序号之前的所有数据都已成功接收</strong>。</li>
</ul>
<h1 id="TCP连接管理"><a href="#TCP连接管理" class="headerlink" title="TCP连接管理"></a>TCP连接管理</h1><h2 id="三次握手"><a href="#三次握手" class="headerlink" title="三次握手"></a>三次握手</h2><p>用于建立TCP连接。</p>
<ol>
<li><strong>第一次握手</strong>：客户端发送SYN报文。随机生成初始序列号<code>client_isn</code>，并将SYN标志位置1。客户端进入<code>SYN-SENT</code>状态。</li>
<li><strong>第二次握手</strong>：服务器收到SYN报文后，回复SYN-ACK报文。随机生成自己的初始序列号<code>server_isn</code>，将确认应答号设置为<code>client_isn + 1</code>，并将SYN和ACK标志位置1。服务器进入<code>SYN-RCVD</code>状态。</li>
<li><strong>第三次握手</strong>：客户端收到SYN-ACK报文后，回复ACK报文。将确认应答号设置为<code>server_isn + 1</code>，ACK标志位置1。<strong>此报文可以携带数据</strong>。客户端进入<code>ESTABLISHED</code>状态，服务器收到后也进入<code>ESTABLISHED</code>状态。</li>
</ol>
<p><strong>为什么需要三次握手？</strong></p>
<ol>
<li><strong>阻止重复历史连接初始化（主因）</strong>：防止旧的、延迟的SYN报文到达服务器，导致服务器错误地打开一个连接。客户端可以通过第三次握手来判断这是否是一个历史连接，并决定是否重置它。</li>
<li><strong>同步双方初始序列号</strong>：确保双方都知晓并确认了对方的初始序列号，这是可靠传输的基础。</li>
<li><strong>避免资源浪费</strong>：如果是两次握手，服务器收到SYN后就建立连接。若客户端的SYN报文丢失，服务器会一直维持一个无效的连接，造成资源浪费。</li>
</ol>
<p><strong>相关概念</strong>：</p>
<ul>
<li><strong>半连接队列</strong>：服务器在收到第一次握手（SYN）后，但未完成三次握手时，会将连接请求放入此队列。</li>
<li><strong>全连接队列</strong>：已完成三次握手、建立成功的连接会被放入此队列，等待应用进程调用<code>accept()</code>取走。</li>
<li><strong>SYN Flood攻击</strong>：攻击者伪造大量IP发送SYN报文，但不完成第三次握手，占满服务器的半连接队列，导致正常用户无法连接。</li>
</ul>
<h2 id="四次挥手"><a href="#四次挥手" class="headerlink" title="四次挥手"></a>四次挥手</h2><p>用于释放TCP连接。TCP连接是全双工的，因此每个方向必须单独关闭。</p>
<ol>
<li><strong>第一次挥手</strong>：客户端打算关闭连接，发送一个FIN报文（FIN标志位置1）。客户端进入<code>FIN-WAIT-1</code>状态。</li>
<li><strong>第二次挥手</strong>：服务器收到FIN报文后，回复一个ACK报文（确认应答号为客户端序列号+1）。服务器进入<code>CLOSE-WAIT</code>状态。此时，<strong>从客户端到服务器的连接关闭，但服务器到客户端的连接仍然存在</strong>（即半关闭状态）。</li>
<li><strong>第三次挥手</strong>：当服务器处理完所有数据后，也发送一个FIN报文。服务器进入<code>LAST-ACK</code>状态。</li>
<li><strong>第四次挥手</strong>：客户端收到服务器的FIN报文后，回复一个ACK报文。客户端进入<code>TIME-WAIT</code>状态。服务器收到ACK后，立即进入<code>CLOSED</code>状态。客户端经过<strong>2MSL</strong>（最长报文段寿命的两倍）时间后，也进入<code>CLOSED</code>状态。</li>
</ol>
<p><strong>为什么需要四次挥手？</strong><br>因为TCP连接是全双工的，一方发送FIN只表示它不再发送数据，但还可以接收数据。服务器在收到客户端的FIN后，可能还有数据需要发送和处理，因此ACK和FIN报文需要分开发送，这就比三次握手多了一次。</p>
<p><strong>为什么需要TIME-WAIT状态？</strong></p>
<ol>
<li><strong>可靠地终止连接</strong>：确保最后一个ACK报文能够到达服务器。如果这个ACK丢失，服务器会超时重传FIN报文，处于<code>TIME-WAIT</code>状态的客户端可以重发ACK。</li>
<li><strong>让旧连接的所有报文在网络中消逝</strong>：防止之前连接的延迟报文段被新的、具有相同四元组（源IP、源端口、目的IP、目的端口）的连接错误地接收。</li>
</ol>
<h1 id="TCP可靠传输机制"><a href="#TCP可靠传输机制" class="headerlink" title="TCP可靠传输机制"></a>TCP可靠传输机制</h1><h2 id="重传机制"><a href="#重传机制" class="headerlink" title="重传机制"></a>重传机制</h2><ul>
<li><strong>超时重传</strong>：发送方为每个发送的数据包设置一个计时器。如果在<strong>RTO</strong>（超时重传时间）内未收到确认应答，就重传该数据包。RTO应略大于<strong>RTT</strong>（数据包的往返时间）。</li>
<li><strong>快速重传</strong>：当接收方收到一个失序的报文段时，它会立即重复发送最后一个按序接收的ACK。当发送方<strong>连续收到3个重复的ACK</strong>时，就认为该ACK之后的数据包已经丢失，会在超时之前立即重传，而不必等待超时。</li>
</ul>
<h2 id="滑动窗口与流量控制"><a href="#滑动窗口与流量控制" class="headerlink" title="滑动窗口与流量控制"></a>滑动窗口与流量控制</h2><ul>
<li><strong>目的</strong>：解决发送方发送速率过快，导致接收方缓冲区溢出的问题。</li>
<li><strong>机制</strong>：<ul>
<li>接收方通过TCP头部的<strong>窗口大小</strong>字段，告知发送方自己接收缓冲区的剩余空间（接收窗口，<code>rwnd</code>）。</li>
<li>发送方根据<code>rwnd</code>的大小，调整自己可以发送的数据量。</li>
<li>当<code>rwnd = 0</code>时，发送方停止发送数据，并启动一个持久计时器，定期探测接收方窗口是否已恢复。</li>
</ul>
</li>
</ul>
<h2 id="拥塞控制"><a href="#拥塞控制" class="headerlink" title="拥塞控制"></a>拥塞控制</h2><ul>
<li><strong>目的</strong>：防止过多的数据注入网络，避免网络中间设备（如路由器）负载过大。</li>
<li><strong>核心</strong>：发送方维护一个<strong>拥塞窗口</strong>，其大小取决于网络的拥塞程度。发送方的<strong>实际发送窗口</strong> &#x3D; <code>min(拥塞窗口, 接收窗口)</code>。</li>
<li><strong>四大算法</strong>：<ol>
<li><strong>慢启动</strong>：连接开始时，拥塞窗口从1开始，每收到一个ACK，窗口就加倍（指数增长）。直到窗口达到<strong>慢启动阈值</strong>。</li>
<li><strong>拥塞避免</strong>：当窗口达到慢启动阈值后，进入拥塞避免阶段，每收到一个ACK，窗口只增加1（线性增长）。</li>
<li><strong>拥塞发生</strong>：<ul>
<li><strong>超时重传</strong>：认为网络拥塞严重。慢启动阈值降为当前窗口的一半，拥塞窗口重置为1，重新开始慢启动。</li>
<li><strong>快速重传</strong>（收到3个重复ACK）：认为网络拥塞较轻。执行<strong>快速恢复</strong>。</li>
</ul>
</li>
<li><strong>快速恢复</strong>：<ul>
<li>慢启动阈值降为当前窗口的一半。</li>
<li>拥塞窗口设置为新的慢启动阈值 + 3。</li>
<li>重传丢失的数据包。</li>
<li>每收到一个重复的ACK，拥塞窗口增加1。</li>
<li>当收到一个新的数据的ACK时，退出快速恢复状态，进入拥塞避免阶段。</li>
</ul>
</li>
</ol>
</li>
</ul>
]]></content>
      <categories>
        <category>cn</category>
      </categories>
  </entry>
  <entry>
    <title>perf使用初探</title>
    <url>/2025/10/24/perf%E4%BD%BF%E7%94%A8%E5%88%9D%E6%8E%A2/</url>
    <content><![CDATA[<h1 id="perf简述"><a href="#perf简述" class="headerlink" title="perf简述"></a>perf简述</h1><p>Perf是Linux内核自带的性能分析工具，基于硬件性能计数器，开销很小。</p>
<span id="more"></span>

<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>安装这里不再赘述，可以通过<code>perf --version</code>观察是否安装成功。</p>
<h2 id="简单指令"><a href="#简单指令" class="headerlink" title="简单指令"></a>简单指令</h2><h3 id="快速性能统计"><a href="#快速性能统计" class="headerlink" title="快速性能统计"></a>快速性能统计</h3><ul>
<li><code>perf stat ./program</code></li>
<li><code>perf stat -p &lt;PID&gt;</code></li>
<li>perf stat -a sleep 5</li>
</ul>
<h3 id="记录和分析性能数据"><a href="#记录和分析性能数据" class="headerlink" title="记录和分析性能数据"></a>记录和分析性能数据</h3><ul>
<li><p>记录性能数据</p>
<p><code>perf record -g ./program</code></p>
</li>
<li><p>查看分析结果</p>
<p><code>perf report</code></p>
</li>
<li><p>图形化查看</p>
<p><code>perf report --tui</code></p>
</li>
</ul>
<h1 id="实例分析"><a href="#实例分析" class="headerlink" title="实例分析"></a>实例分析</h1><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;chrono&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;thread&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. 计算密集型函数 - 模拟热点</span></span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">heavy_computation</span><span class="params">(<span class="type">int</span> iterations)</span> </span>&#123;</span><br><span class="line">    <span class="type">double</span> result = <span class="number">0.0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; iterations; ++i) &#123;</span><br><span class="line">        result += std::<span class="built_in">sin</span>(i * <span class="number">0.1</span>) * std::<span class="built_in">cos</span>(i * <span class="number">0.1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 内存访问密集型函数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">memory_intensive</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">std::vector&lt;<span class="type">int</span>&gt; <span class="title">data</span><span class="params">(<span class="number">1000000</span>)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; data.<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">        data[i] = i * <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 模拟一些计算</span></span><br><span class="line">    <span class="type">long</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; data.<span class="built_in">size</span>(); i += <span class="number">100</span>) &#123;</span><br><span class="line">        sum += data[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 函数调用密集型</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">function_a</span><span class="params">()</span> </span>&#123; <span class="keyword">volatile</span> <span class="type">int</span> x = <span class="number">1</span>; &#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">function_b</span><span class="params">()</span> </span>&#123; <span class="keyword">volatile</span> <span class="type">int</span> y = <span class="number">2</span>; &#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">function_c</span><span class="params">()</span> </span>&#123; <span class="keyword">volatile</span> <span class="type">int</span> z = <span class="number">3</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">call_intensive</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; ++i) &#123;</span><br><span class="line">        <span class="built_in">function_a</span>();</span><br><span class="line">        <span class="built_in">function_b</span>();</span><br><span class="line">        <span class="built_in">function_c</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Perf 测试程序开始...\n&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 测试不同的工作负载</span></span><br><span class="line">    <span class="keyword">auto</span> start = std::chrono::high_resolution_clock::<span class="built_in">now</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 1. 计算密集型</span></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;计算密集型任务...\n&quot;</span>;</span><br><span class="line">    <span class="type">double</span> result1 = <span class="built_in">heavy_computation</span>(<span class="number">5000000</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 2. 内存密集型  </span></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;内存密集型任务...\n&quot;</span>;</span><br><span class="line">    <span class="built_in">memory_intensive</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 3. 函数调用密集型</span></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;函数调用密集型任务...\n&quot;</span>;</span><br><span class="line">    <span class="built_in">call_intensive</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 4. 混合负载</span></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;混合负载任务...\n&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; ++i) &#123;</span><br><span class="line">        <span class="built_in">heavy_computation</span>(<span class="number">1000</span>);</span><br><span class="line">        <span class="built_in">memory_intensive</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">auto</span> end = std::chrono::high_resolution_clock::<span class="built_in">now</span>();</span><br><span class="line">    <span class="keyword">auto</span> duration = std::chrono::<span class="built_in">duration_cast</span>&lt;std::chrono::milliseconds&gt;(end - start);</span><br><span class="line">    </span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;总执行时间: &quot;</span> &lt;&lt; duration.<span class="built_in">count</span>() &lt;&lt; <span class="string">&quot; ms\n&quot;</span>;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;计算结果: &quot;</span> &lt;&lt; result1 &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;测试完成!\n&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h2><p><code>g++ -g perf.cpp -o test_perf</code></p>
<p>注意要编译待调试信息的程序</p>
<h2 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h2><p>注意perf和待测试程序都需要加权限，我们这里测试为主，直接chmod 777即可</p>
<h3 id="基础性能统计"><a href="#基础性能统计" class="headerlink" title="基础性能统计"></a>基础性能统计</h3><p><code>perf stat ./test_perf</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Perf 测试程序开始...</span><br><span class="line">计算密集型任务...</span><br><span class="line">内存密集型任务...</span><br><span class="line">函数调用密集型任务...</span><br><span class="line">混合负载任务...</span><br><span class="line">总执行时间: 12109 ms</span><br><span class="line">计算结果: 0.245091</span><br><span class="line">测试完成!</span><br><span class="line"></span><br><span class="line"> Performance counter stats for &#x27;./test_perf&#x27;:</span><br><span class="line"></span><br><span class="line">          12071.67 msec task-clock                #    0.997 CPUs utilized</span><br><span class="line">              5854      context-switches          #    0.485 K/sec</span><br><span class="line">               117      cpu-migrations            #    0.010 K/sec</span><br><span class="line">              2202      page-faults               #    0.182 K/sec</span><br><span class="line">       27487318701      cycles                    #    2.277 GHz</span><br><span class="line">       50921469069      instructions              #    1.85  insn per cycle</span><br><span class="line">   &lt;not supported&gt;      branches</span><br><span class="line">           1413851      branch-misses</span><br><span class="line"></span><br><span class="line">      12.112368048 seconds time elapsed</span><br><span class="line"></span><br><span class="line">      12.049445000 seconds user</span><br><span class="line">       0.024992000 seconds sys</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="基础指标"><a href="#基础指标" class="headerlink" title="基础指标"></a>基础指标</h4><ul>
<li><p>任务时钟：</p>
<p>12071.67ms程序实际消耗的CPU时间，约为0.997核</p>
</li>
<li><p>耗时</p>
<p>12.11秒，与任务时钟接近，说明CPU利用率很高</p>
</li>
</ul>
<h4 id="关键性能指标"><a href="#关键性能指标" class="headerlink" title="关键性能指标"></a>关键性能指标</h4><ul>
<li><p>上下文切换</p>
<p>5854次，每秒钟485次，属于中等水平</p>
</li>
<li><p>CPU迁移</p>
<p>117次，迁移次数较低，对性能影响较小</p>
</li>
<li><p>缺页异常</p>
<p>2202次，主要为次要缺页，可能涉及动态内存分配</p>
</li>
</ul>
<h4 id="CPU核心指标"><a href="#CPU核心指标" class="headerlink" title="CPU核心指标"></a>CPU核心指标</h4><ul>
<li><p>周期数</p>
<p>274.87亿次</p>
</li>
<li><p>指令数，509.21亿条</p>
</li>
<li><p>每周期指令数IPC 1.85条 说明CPU执行效率良好</p>
<p>解释：IPC越高，表示CPU在每个时钟周期内完成的有效工作越多，效率越高。</p>
</li>
</ul>
<h3 id="函数级分析"><a href="#函数级分析" class="headerlink" title="函数级分析"></a>函数级分析</h3><p><code>./perf record -e cycles,instructions,cache-misses,cache-references -g ./test_perf</code></p>
<ul>
<li><p><code>./perf record</code></p>
<p>调用perf记录功能</p>
</li>
<li><p><code> -e cycles,instructions,cache-misses,cache-references</code></p>
<p>指定检测性能事件：</p>
<ul>
<li>cycles：cpu周期数</li>
<li>instructions：执行指令数</li>
<li>cache-missed和cache-references：缓存未命中次数和缓存访问总次数，结合可以计算出缓存未命中率</li>
</ul>
</li>
<li><p>-g</p>
<p>记录每个样本当时的函数调用堆栈，可以看到哪个函数函数耗时多，还能知道谁调用了它</p>
</li>
</ul>
]]></content>
      <categories>
        <category>cpp</category>
      </categories>
  </entry>
  <entry>
    <title>双椒牛肉</title>
    <url>/2025/10/09/%E5%8F%8C%E6%A4%92%E7%89%9B%E8%82%89/</url>
    <content><![CDATA[<h1 id="双椒牛肉"><a href="#双椒牛肉" class="headerlink" title="双椒牛肉"></a>双椒牛肉</h1><p>家里带来的牛排，总是煎着吃，其实也可以切了炒着吃</p>
<h2 id="食材准备"><a href="#食材准备" class="headerlink" title="食材准备"></a>食材准备</h2><ol>
<li>牛肉</li>
<li>彩椒</li>
<li>生姜 大蒜 蚝油 生抽 老抽 淀粉（实测不一定需要）</li>
</ol>
<h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><ol>
<li>牛肉切丝</li>
<li>拍蒜，切姜丝，切彩椒丝</li>
<li>制作调味汁，小碗里放2勺生抽，1勺老抽，适量蚝油，少量盐，少量淀粉，加水搅匀（水不要太多）</li>
<li>锅热倒油，炒香大蒜生姜，倒牛肉到断生，下青红椒丝。青红椒丝不生了就可以倒调料水了，锅里水炒的快没有了就可以出锅</li>
</ol>
]]></content>
      <categories>
        <category>cooking</category>
      </categories>
  </entry>
  <entry>
    <title>noexcept</title>
    <url>/2025/10/24/noexcept/</url>
    <content><![CDATA[<p>noexcept是C++11引入的异常规范，用于声明一个函数不会抛出任何异常，是一个编译时提示和运行时保证。</p>
<h1 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">()</span> <span class="keyword">noexcept</span></span>;</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h1 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h1><h2 id="优化机会"><a href="#优化机会" class="headerlink" title="优化机会"></a>优化机会</h2><p>加了之后，编译期可以省略异常处理代码</p>
<h2 id="容器行为控制"><a href="#容器行为控制" class="headerlink" title="容器行为控制"></a>容器行为控制</h2><p>最重要的应用场景，即如果移动构造函数中如果没有noexcept，编译器会自动退化为拷贝构造函数。因此，移动构造函数一般会标记为noexcept</p>
]]></content>
      <categories>
        <category>cpp</category>
      </categories>
  </entry>
  <entry>
    <title>可变参数模版</title>
    <url>/2025/10/10/%E5%8F%AF%E5%8F%98%E5%8F%82%E6%95%B0%E6%A8%A1%E7%89%88/</url>
    <content><![CDATA[<h1 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span>... Args&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(Args... args)</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="核心概念"><a href="#核心概念" class="headerlink" title="核心概念"></a>核心概念</h1><ul>
<li><p>参数包</p>
<p>包含多个参数的模版参数</p>
</li>
<li><p>包展开</p>
<p>解包参数的机制</p>
</li>
</ul>
<h1 id="展开参数包的四种方法"><a href="#展开参数包的四种方法" class="headerlink" title="展开参数包的四种方法"></a>展开参数包的四种方法</h1><ol>
<li><p>递归展开</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T,<span class="keyword">typename</span>... Args&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(T first,Args... rest)</span></span>&#123;</span><br><span class="line">    std::cout&lt;&lt;first&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">    <span class="built_in">print</span>(rest...);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>折叠表达式</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span>... Args&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">auto</span> <span class="title">sum</span><span class="params">(Args... args)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (...+args)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>初始化列表</p>
<p>代码解释：</p>
<ul>
<li>初始化列表用到了逗号运算符，相当于运行逗号左边的，输出逗号右边的东西。这个0随便取的，取任意值都可以。</li>
<li>使用(void)是为了抑制编译期警告，因为我们用不到这个初始化列表，只是为了cout</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span>... Args&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">printall</span><span class="params">(Args... args)</span></span>&#123;</span><br><span class="line">    (<span class="type">void</span>)std::initializer_list&lt;<span class="type">int</span>&gt;&#123;</span><br><span class="line">      std::cout&lt;&lt;args&lt;&lt;<span class="string">&quot; &quot;</span>,<span class="number">0</span>)...  </span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>lambda</p>
<p>代码解释：</p>
<p>这个使用到了lambda立即调用技巧，举例如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 假设调用：process(1, &quot;hello&quot;, 3.14);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 展开后相当于：</span></span><br><span class="line">[](<span class="keyword">auto</span>&amp;&amp; x1, <span class="keyword">auto</span>&amp;&amp; x2, <span class="keyword">auto</span>&amp;&amp; x3)&#123;</span><br><span class="line">    <span class="comment">// 处理 x1, x2, x3</span></span><br><span class="line">&#125;(<span class="number">1</span>, <span class="string">&quot;hello&quot;</span>, <span class="number">3.14</span>);  <span class="comment">// 立即用参数调用 lambda</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">tmplate&lt;<span class="keyword">typename</span>... Args&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">process</span><span class="params">(Args&amp;&amp;... args)</span></span>&#123;</span><br><span class="line">    [](<span class="keyword">auto</span>&amp;&amp;... xs)&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;(std::forward&lt;Args&gt;(args)...);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="高级用法"><a href="#高级用法" class="headerlink" title="高级用法"></a>高级用法</h1><p>这里介绍完美转发和参数过滤</p>
<h2 id="完美转发"><a href="#完美转发" class="headerlink" title="完美转发"></a>完美转发</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 示例1：转发给 printf</span></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span>... Args&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">wrapper</span><span class="params">(Args&amp;&amp;... args)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(std::forward&lt;Args&gt;(args)...);  <span class="comment">// target_function = printf</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line"><span class="built_in">wrapper</span>(<span class="string">&quot;Value: %d, Name: %s\n&quot;</span>, <span class="number">42</span>, <span class="string">&quot;Alice&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 展开后相当于：</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Value: %d, Name: %s\n&quot;</span>, <span class="number">42</span>, <span class="string">&quot;Alice&quot;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="参数过滤"><a href="#参数过滤" class="headerlink" title="参数过滤"></a>参数过滤</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">bool</span> is_integer = std::is_integral_v&lt;T&gt;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span>... Args&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">auto</span> <span class="title">filter_integers</span><span class="params">(Args... args)</span></span>&#123;</span><br><span class="line">    std::vector&lt;<span class="type">int</span>&gt; result;</span><br><span class="line">    (<span class="type">void</span>)std::initializer_list&lt;<span class="type">int</span>&gt;&#123;</span><br><span class="line">        (is_integer&lt;<span class="keyword">decltype</span>(args)&gt;?(result.<span class="built_in">push_back</span>(args),<span class="number">0</span>):<span class="number">0</span>)...</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> results;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>cpp</category>
      </categories>
  </entry>
  <entry>
    <title>static简述</title>
    <url>/2025/10/10/static%E7%AE%80%E8%BF%B0/</url>
    <content><![CDATA[<h1 id="static在全局作用域的意义"><a href="#static在全局作用域的意义" class="headerlink" title="static在全局作用域的意义"></a>static在全局作用域的意义</h1><ul>
<li><p>静态全局变量&#x2F;函数</p>
  <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//a.cpp</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> counter = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">helper</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//b.cpp</span></span><br><span class="line"><span class="keyword">extern</span> <span class="type">int</span> counter; <span class="comment">//无法访问static变量</span></span><br></pre></td></tr></table></figure></li>
</ul>
<p>静态全局变量可以限制符号的可见性为当前编译单元（.cpp）</p>
<h1 id="static在类内部的意义"><a href="#static在类内部的意义" class="headerlink" title="static在类内部的意义"></a>static在类内部的意义</h1><ul>
<li><p>静态成员变量</p>
  <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Counter</span>&#123;</span><br><span class="line">    <span class="keyword">public</span>：</span><br><span class="line">        <span class="type">static</span> <span class="type">int</span> count;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> Counter::count = <span class="number">0</span>; <span class="comment">//必须在cpp定义一次</span></span><br><span class="line"></span><br><span class="line">Counter c1,c2;</span><br><span class="line">c<span class="number">1.</span>count = <span class="number">5</span>; <span class="comment">//c2.count也等于5</span></span><br></pre></td></tr></table></figure>

<p>属于类本身，而不是类的实例，可以通过类名直接访问，也可以通过类的对象访问</p>
</li>
<li><p>静态成员函数</p>
  <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Logger</span>&#123;</span><br><span class="line">    <span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">log</span><span class="params">(<span class="type">const</span> std::string&amp; msg)</span></span>&#123;</span><br><span class="line">        std::cout &lt;&lt; msg &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>  没有this指针，不能访问非静态成员；可以访问其他静态成员</p>
<p>  不能作为虚函数</p>
<p>  可以通过类名直接调用</p>
</li>
</ul>
<h1 id="static在函数内部的意义"><a href="#static在函数内部的意义" class="headerlink" title="static在函数内部的意义"></a>static在函数内部的意义</h1><ul>
<li><p>静态局部变量</p>
  <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">call_once</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> called = <span class="number">0</span>; <span class="comment">//只初始化这一次</span></span><br><span class="line">    called++;</span><br><span class="line">    cout &lt;&lt; called;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">call_once</span>(); <span class="comment">//输出1</span></span><br><span class="line"><span class="built_in">call_once</span>(); <span class="comment">//输出2</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="成员函数可以访问静态变量吗？"><a href="#成员函数可以访问静态变量吗？" class="headerlink" title="成员函数可以访问静态变量吗？"></a>成员函数可以访问静态变量吗？</h1><p>可以，但是静态成员函数不能访问普通变量。</p>
]]></content>
      <categories>
        <category>cpp</category>
      </categories>
  </entry>
  <entry>
    <title>多态类型简述</title>
    <url>/2025/10/11/%E5%A4%9A%E6%80%81%E7%B1%BB%E5%9E%8B%E7%AE%80%E8%BF%B0/</url>
    <content><![CDATA[<p>C++多态主要分为静态多态和动态多态</p>
<h1 id="静态多态（编译时多态）"><a href="#静态多态（编译时多态）" class="headerlink" title="静态多态（编译时多态）"></a>静态多态（编译时多态）</h1><h2 id="函数重载"><a href="#函数重载" class="headerlink" title="函数重载"></a>函数重载</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Calculator</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> </span>&#123; <span class="keyword">return</span> a + b; &#125;</span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">add</span><span class="params">(<span class="type">double</span> a, <span class="type">double</span> b)</span> </span>&#123; <span class="keyword">return</span> a + b; &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> c)</span> </span>&#123; <span class="keyword">return</span> a + b + c; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 编译器根据参数类型和数量选择合适的函数</span></span><br><span class="line">Calculator calc;</span><br><span class="line">calc.<span class="built_in">add</span>(<span class="number">1</span>, <span class="number">2</span>);        <span class="comment">// 调用int版本</span></span><br><span class="line">calc.<span class="built_in">add</span>(<span class="number">1.5</span>, <span class="number">2.5</span>);    <span class="comment">// 调用double版本</span></span><br></pre></td></tr></table></figure>

<h2 id="运算符重载"><a href="#运算符重载" class="headerlink" title="运算符重载"></a>运算符重载</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Complex</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">double</span> real, imag;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Complex</span>(<span class="type">double</span> r = <span class="number">0</span>, <span class="type">double</span> i = <span class="number">0</span>) : <span class="built_in">real</span>(r), <span class="built_in">imag</span>(i) &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    Complex <span class="keyword">operator</span>+(<span class="type">const</span> Complex&amp; other) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Complex</span>(real + other.real, imag + other.imag);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">Complex <span class="title">c1</span><span class="params">(<span class="number">1</span>, <span class="number">2</span>)</span>, <span class="title">c2</span><span class="params">(<span class="number">3</span>, <span class="number">4</span>)</span></span>;</span><br><span class="line">Complex c3 = c1 + c2;  <span class="comment">// 使用重载的+运算符</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="模版多态"><a href="#模版多态" class="headerlink" title="模版多态"></a>模版多态</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function">T <span class="title">max</span><span class="params">(T a, T b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (a &gt; b) ? a : b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> result1 = <span class="built_in">max</span>(<span class="number">1</span>, <span class="number">2</span>);        <span class="comment">// T=int</span></span><br><span class="line"><span class="type">double</span> result2 = <span class="built_in">max</span>(<span class="number">1.5</span>, <span class="number">2.5</span>); <span class="comment">// T=double</span></span><br></pre></td></tr></table></figure>

<h1 id="动态多态（运行时多态）"><a href="#动态多态（运行时多态）" class="headerlink" title="动态多态（运行时多态）"></a>动态多态（运行时多态）</h1><h2 id="虚函数多态"><a href="#虚函数多态" class="headerlink" title="虚函数多态"></a>虚函数多态</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">makeSound</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Animal makes sound&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">virtual</span> ~<span class="built_in">Animal</span>() = <span class="keyword">default</span>;  <span class="comment">// 虚析构函数</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> : <span class="keyword">public</span> Animal &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">makeSound</span><span class="params">()</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Dog barks&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span> : <span class="keyword">public</span> Animal &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">makeSound</span><span class="params">()</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Cat meows&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 运行时多态的使用</span></span><br><span class="line">Animal* animals[] = &#123;<span class="keyword">new</span> <span class="built_in">Dog</span>(), <span class="keyword">new</span> <span class="built_in">Cat</span>()&#125;;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++) &#123;</span><br><span class="line">    animals[i]-&gt;<span class="built_in">makeSound</span>();  <span class="comment">// 根据实际对象类型调用相应函数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="虚函数调用的地址如何解析"><a href="#虚函数调用的地址如何解析" class="headerlink" title="虚函数调用的地址如何解析"></a>虚函数调用的地址如何解析</h2><p>通过虚函数表（vtable）解析。当类中有虚函数时，编译器会为每个包含虚函数的类创建一个虚函数表，并在每个对象中添加一个虚函数表指针。</p>
<p>这个指针的地址其实就是对象地址，所以我们实际上可以通过这个指针调用虚函数。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">void</span> <span class="params">(*FuncPtr)</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">// 手动模拟虚函数调用过程</span></span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;\n=== 手动模拟虚函数调用 ===&quot;</span> &lt;&lt; std::endl;</span><br><span class="line"><span class="type">uintptr_t</span>* vptr = <span class="built_in">reinterpret_cast</span>&lt;<span class="type">uintptr_t</span>*&gt;(derived);</span><br><span class="line"><span class="type">uintptr_t</span>* vtable = <span class="built_in">reinterpret_cast</span>&lt;<span class="type">uintptr_t</span>*&gt;(*vptr);</span><br><span class="line">FuncPtr func = <span class="built_in">reinterpret_cast</span>&lt;FuncPtr&gt;(vtable[<span class="number">0</span>]); <span class="comment">// func1的地址</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>cpp</category>
      </categories>
  </entry>
  <entry>
    <title>存储系统</title>
    <url>/2025/10/11/%E5%AD%98%E5%82%A8%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<h1 id="存储器层次结构"><a href="#存储器层次结构" class="headerlink" title="存储器层次结构"></a>存储器层次结构</h1><h2 id="存储金字塔"><a href="#存储金字塔" class="headerlink" title="存储金字塔"></a>存储金字塔</h2><table>
<thead>
<tr>
<th align="left">层级</th>
<th align="left">存储介质</th>
<th align="left">特点</th>
<th align="left">访问时间</th>
<th align="left">容量</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><strong>寄存器</strong></td>
<td align="left">CPU内部寄存器</td>
<td align="left">速度极快，半时钟周期完成</td>
<td align="left">~0.1ns</td>
<td align="left">KB级</td>
</tr>
<tr>
<td align="left"><strong>CPU Cache</strong></td>
<td align="left">SRAM（静态随机存储器）</td>
<td align="left">断电数据丢失，分L1&#x2F;L2&#x2F;L3</td>
<td align="left">~1ns</td>
<td align="left">MB级</td>
</tr>
<tr>
<td align="left"><strong>主内存</strong></td>
<td align="left">DRAM（动态随机存储器）</td>
<td align="left">需要刷新，速度较慢</td>
<td align="left">~10-100ns</td>
<td align="left">GB级</td>
</tr>
<tr>
<td align="left"><strong>SSD</strong></td>
<td align="left">NAND Flash</td>
<td align="left">非易失性，速度快于HDD</td>
<td align="left">~10-100μs</td>
<td align="left">TB级</td>
</tr>
<tr>
<td align="left"><strong>HDD</strong></td>
<td align="left">磁性盘片</td>
<td align="left">机械寻道，速度最慢</td>
<td align="left">~1-10ms</td>
<td align="left">TB级</td>
</tr>
</tbody></table>
<p><strong>关键面试点：</strong></p>
<ul>
<li><strong>SRAM vs DRAM</strong>：SRAM更快更贵，用于Cache；DRAM更便宜，用于主内存</li>
<li><strong>访问时间差距</strong>：CPU Cache比内存快10-100倍，内存比SSD快1000倍</li>
</ul>
<h1 id="CPU-Cache工作原理"><a href="#CPU-Cache工作原理" class="headerlink" title="CPU Cache工作原理"></a>CPU Cache工作原理</h1><h2 id="层级"><a href="#层级" class="headerlink" title="层级"></a>层级</h2><ul>
<li><strong>L1 Cache</strong>：分指令Cache和数据Cache，每个核心独享</li>
<li><strong>L2 Cache</strong>：每个核心独享</li>
<li><strong>L3 Cache</strong>：所有核心共享</li>
</ul>
<h1 id="虚拟内存机制"><a href="#虚拟内存机制" class="headerlink" title="虚拟内存机制"></a>虚拟内存机制</h1><h2 id="为什么需要虚拟内存？"><a href="#为什么需要虚拟内存？" class="headerlink" title="为什么需要虚拟内存？"></a>为什么需要虚拟内存？</h2><ul>
<li><strong>进程隔离</strong>：每个进程有独立的地址空间</li>
<li><strong>内存扩展</strong>：程序可以使用比物理内存更大的地址空间</li>
<li><strong>简化编程</strong>：程序员无需关心物理内存布局</li>
</ul>
<h2 id="地址转换过程"><a href="#地址转换过程" class="headerlink" title="地址转换过程"></a>地址转换过程</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">虚拟地址 → [MMU] → 物理地址</span><br><span class="line">              ↓</span><br><span class="line">      页表（存储映射关系）</span><br></pre></td></tr></table></figure>

<h2 id="分段-vs-分页"><a href="#分段-vs-分页" class="headerlink" title="分段 vs 分页"></a>分段 vs 分页</h2><table>
<thead>
<tr>
<th align="left">方面</th>
<th align="left">分段</th>
<th align="left">分页</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><strong>管理视角</strong></td>
<td align="left">逻辑视角（代码段、数据段等）</td>
<td align="left">物理视角（固定大小页面）</td>
</tr>
<tr>
<td align="left"><strong>划分单位</strong></td>
<td align="left">按逻辑单元大小划分</td>
<td align="left">固定大小（通常4KB）</td>
</tr>
<tr>
<td align="left"><strong>地址构成</strong></td>
<td align="left">段基址 + 段内偏移</td>
<td align="left">页号 + 页内偏移</td>
</tr>
<tr>
<td align="left"><strong>碎片问题</strong></td>
<td align="left">外部碎片严重</td>
<td align="left">内部碎片（页内浪费）</td>
</tr>
<tr>
<td align="left"><strong>现代应用</strong></td>
<td align="left">较少使用</td>
<td align="left">现代操作系统主流</td>
</tr>
</tbody></table>
<h2 id="多级页表"><a href="#多级页表" class="headerlink" title="多级页表"></a>多级页表</h2><ul>
<li>解决单级页表空间开销大的问题</li>
<li>按需分配页表，节省内存</li>
<li>举例：x86-64使用4级页表</li>
</ul>
<h2 id="页面置换算法"><a href="#页面置换算法" class="headerlink" title="页面置换算法"></a>页面置换算法</h2><h3 id="最佳置换算法（OPT）"><a href="#最佳置换算法（OPT）" class="headerlink" title="最佳置换算法（OPT）"></a>最佳置换算法（OPT）</h3><ul>
<li>淘汰未来最长时间不会被访问的页面</li>
<li>理论最优，但无法实际实现（无法预知未来）</li>
</ul>
<h3 id="先进先出（FIFO）"><a href="#先进先出（FIFO）" class="headerlink" title="先进先出（FIFO）"></a>先进先出（FIFO）</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 伪代码实现</span></span><br><span class="line">queue page_queue;  <span class="comment">// 页面队列</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">access_page</span><span class="params">(<span class="type">int</span> page_num)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">page_in_memory</span>(page_num)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">memory_full</span>()) &#123;</span><br><span class="line">            victim = page_queue.<span class="built_in">front</span>();  <span class="comment">// 淘汰最先进入的</span></span><br><span class="line">            page_queue.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="built_in">remove_page</span>(victim);</span><br><span class="line">        &#125;</span><br><span class="line">        page_queue.<span class="built_in">push</span>(page_num);</span><br><span class="line">        <span class="built_in">load_page</span>(page_num);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<ul>
<li><strong>Belady异常</strong>：分配更多页框时，缺页率反而上升</li>
</ul>
<h3 id="最近最久未使用（LRU）"><a href="#最近最久未使用（LRU）" class="headerlink" title="最近最久未使用（LRU）"></a>最近最久未使用（LRU）</h3><p>cpp</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 伪代码实现</span><br><span class="line">list page_list;  // 按访问时间排序</span><br><span class="line"></span><br><span class="line">void access_page(int page_num) &#123;</span><br><span class="line">    if (page_in_memory(page_num)) &#123;</span><br><span class="line">        page_list.remove(page_num);  // 从原位置移除</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        if (memory_full()) &#123;</span><br><span class="line">            victim = page_list.back();  // 淘汰最久未使用的</span><br><span class="line">            page_list.pop_back();</span><br><span class="line">            remove_page(victim);</span><br><span class="line">        &#125;</span><br><span class="line">        load_page(page_num);</span><br><span class="line">    &#125;</span><br><span class="line">    page_list.push_front(page_num);  // 放到最近使用位置</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>实际近似实现：时钟算法、二次机会算法</li>
</ul>
<h1 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h1><h2 id="概念题"><a href="#概念题" class="headerlink" title="概念题"></a>概念题</h2><ol>
<li>为什么需要多级Cache<ul>
<li>在速度和容量取得平衡</li>
<li>L1追求速度，L3追求容量</li>
<li>降低平均内存访问时间</li>
</ul>
</li>
<li>虚拟内存的好处</li>
<li>如何监控程序缺页情况？<ul>
<li>Linux：<code>perf stat -e page-faults ./program</code></li>
<li>Windows：性能监视器跟踪Page Faults&#x2F;sec</li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>os</category>
      </categories>
  </entry>
  <entry>
    <title>应用层</title>
    <url>/2025/10/12/%E5%BA%94%E7%94%A8%E5%B1%82/</url>
    <content><![CDATA[<h1 id="DNS"><a href="#DNS" class="headerlink" title="DNS"></a>DNS</h1><h2 id="DNS是什么"><a href="#DNS是什么" class="headerlink" title="DNS是什么"></a>DNS是什么</h2><ul>
<li>将域名转换为IP地址的分布式系统</li>
</ul>
<h2 id="为什么使用分布式系统"><a href="#为什么使用分布式系统" class="headerlink" title="为什么使用分布式系统"></a>为什么使用分布式系统</h2><ul>
<li>单点故障 一台服务器宕机，全网瘫痪</li>
<li>性能瓶颈 单台服务器难以承受全球海量查询</li>
<li>远距离延迟 集中式服务器无法就近服务全球用户</li>
<li>维护困难 频繁更新 高成本维护</li>
</ul>
<h2 id="域名的层级结构"><a href="#域名的层级结构" class="headerlink" title="域名的层级结构"></a>域名的层级结构</h2><p>从右到左层级递增，如<code>www.server.com</code></p>
<ul>
<li>根域名：<code>.</code></li>
<li>顶级域名：<code>.com</code></li>
<li>二级域名：<code>server.com</code></li>
<li>三级域名：<code>www.server.com</code></li>
</ul>
<h2 id="DNS-解析过程"><a href="#DNS-解析过程" class="headerlink" title="DNS 解析过程"></a>DNS 解析过程</h2><ol>
<li>浏览器缓存 → 2. 本地 hosts 文件 → 3. 本地 DNS 服务器 → 4. 根 DNS 服务器 → 5. 顶级域名服务器 → 6. 权威 DNS 服务器 → 7. 返回 IP 并缓存 → 8. 浏览器发起连接</li>
</ol>
<h2 id="递归查询-vs-迭代查询"><a href="#递归查询-vs-迭代查询" class="headerlink" title="递归查询 vs 迭代查询"></a>递归查询 vs 迭代查询</h2><table>
<thead>
<tr>
<th align="left">类型</th>
<th align="left">发起者</th>
<th align="left">特点</th>
<th align="left">适用场景</th>
</tr>
</thead>
<tbody><tr>
<td align="left">递归查询</td>
<td align="left">客户端（如浏览器）</td>
<td align="left">客户端只发一次请求，等待最终结果</td>
<td align="left">用户端</td>
</tr>
<tr>
<td align="left">迭代查询</td>
<td align="left">本地 DNS 服务器</td>
<td align="left">服务器返回下一级地址，客户端继续查询</td>
<td align="left">DNS 服务器之</td>
</tr>
</tbody></table>
<h1 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h1><h2 id="报文结构"><a href="#报文结构" class="headerlink" title="报文结构"></a>报文结构</h2><h3 id="请求报文"><a href="#请求报文" class="headerlink" title="请求报文"></a>请求报文</h3><table>
<thead>
<tr>
<th align="left">部分</th>
<th align="left">内容</th>
<th align="left">示例</th>
</tr>
</thead>
<tbody><tr>
<td align="left">请求行</td>
<td align="left"><code>METHOD URL HTTP版本</code></td>
<td align="left"><code>GET /index.html HTTP/1.1</code></td>
</tr>
<tr>
<td align="left">请求头</td>
<td align="left">客户端信息、缓存、身份等</td>
<td align="left"><code>Host</code>, <code>User-Agent</code></td>
</tr>
<tr>
<td align="left">请求体</td>
<td align="left">提交的数据（POST&#x2F;PUT）</td>
<td align="left"><code>username=admin</code></td>
</tr>
</tbody></table>
<h3 id="响应报文"><a href="#响应报文" class="headerlink" title="响应报文"></a>响应报文</h3><table>
<thead>
<tr>
<th align="left">部分</th>
<th align="left">内容</th>
<th align="left">示例</th>
</tr>
</thead>
<tbody><tr>
<td align="left">状态行</td>
<td align="left"><code>HTTP版本 状态码 状态信息</code></td>
<td align="left"><code>HTTP/1.1 200 OK</code></td>
</tr>
<tr>
<td align="left">响应头</td>
<td align="left">服务器信息、缓存策略等</td>
<td align="left"><code>Server</code>, <code>Set-Cookie</code></td>
</tr>
<tr>
<td align="left">响应体</td>
<td align="left">返回的资源（HTML&#x2F;JSON等）</td>
<td align="left"><code>&lt;html&gt;...&lt;/html&gt;</code></td>
</tr>
</tbody></table>
<h2 id="HTTP-请求方法"><a href="#HTTP-请求方法" class="headerlink" title="HTTP 请求方法"></a>HTTP 请求方法</h2><table>
<thead>
<tr>
<th align="left">方法</th>
<th align="left">作用</th>
<th align="left">幂等性</th>
<th align="left">安全性</th>
<th align="left">特点</th>
</tr>
</thead>
<tbody><tr>
<td align="left">GET</td>
<td align="left">获取资源</td>
<td align="left">✅</td>
<td align="left">✅</td>
<td align="left">数据在 URL 中，有长度限制</td>
</tr>
<tr>
<td align="left">POST</td>
<td align="left">提交数据</td>
<td align="left">❌</td>
<td align="left">❌</td>
<td align="left">数据在请求体中，适合敏感&#x2F;大量数据</td>
</tr>
<tr>
<td align="left">PUT</td>
<td align="left">更新整个资源</td>
<td align="left">✅</td>
<td align="left">❌</td>
<td align="left">替换整个资源</td>
</tr>
<tr>
<td align="left">DELETE</td>
<td align="left">删除资源</td>
<td align="left">✅</td>
<td align="left">❌</td>
<td align="left">删除指定资源</td>
</tr>
<tr>
<td align="left">PATCH</td>
<td align="left">部分更新资源</td>
<td align="left">❌</td>
<td align="left">❌</td>
<td align="left">部分修改，幂等性取决于实现</td>
</tr>
<tr>
<td align="left">HEAD</td>
<td align="left">获取响应头</td>
<td align="left">✅</td>
<td align="left">✅</td>
<td align="left">类似 GET，无响应体</td>
</tr>
<tr>
<td align="left">OPTIONS</td>
<td align="left">查询支持的方法</td>
<td align="left">✅</td>
<td align="left">✅</td>
<td align="left">用于 CORS 预检请求</td>
</tr>
</tbody></table>
<blockquote>
<p>📌 <strong>幂等</strong>：多次执行效果相同（如 GET、PUT、DELETE）<br>📌 <strong>安全</strong>：不修改服务器资源（如 GET、HEAD）</p>
</blockquote>
]]></content>
      <categories>
        <category>cn</category>
      </categories>
  </entry>
  <entry>
    <title>归并排序</title>
    <url>/2025/10/13/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>; <span class="comment">// 假设数组最大长度为 1e5</span></span><br><span class="line"><span class="type">int</span> tmp[N];             <span class="comment">// 全局定义的临时数组</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">merge_sort</span><span class="params">(<span class="type">int</span> q[], <span class="type">int</span> l, <span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 1.判边界</span></span><br><span class="line">    <span class="keyword">if</span> (l &gt;= r) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2.定分界点</span></span><br><span class="line">    <span class="type">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// 递归排序子序列</span></span><br><span class="line">    <span class="built_in">merge_sort</span>(q, l, mid), <span class="built_in">merge_sort</span>(q, mid + <span class="number">1</span>, r);</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 3.归并排序（双指针法）</span></span><br><span class="line">    <span class="type">int</span> k = <span class="number">0</span>, i = l, j = mid + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt;= mid &amp;&amp; j &lt;= r)</span><br><span class="line">        <span class="keyword">if</span> (q[i] &lt;= q[j]) tmp[k ++ ] = q[i ++ ];</span><br><span class="line">        <span class="keyword">else</span> tmp[k ++ ] = q[j ++ ];</span><br><span class="line">    <span class="comment">// 某个子序列走到最后了，将另一个序列剩余部分加入到 tmp 中</span></span><br><span class="line">    <span class="keyword">while</span> (i &lt;= mid) tmp[k ++ ] = q[i ++ ];</span><br><span class="line">    <span class="keyword">while</span> (j &lt;= r) tmp[k ++ ] = q[j ++ ];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将排序结果 tmp 重新覆盖掉 q</span></span><br><span class="line">    <span class="keyword">for</span> (i = l, j = <span class="number">0</span>; i &lt;= r; i ++, j ++ ) q[i] = tmp[j];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>alg</category>
      </categories>
  </entry>
  <entry>
    <title>小问题集</title>
    <url>/2025/10/11/%E5%B0%8F%E9%97%AE%E9%A2%98%E9%9B%86/</url>
    <content><![CDATA[<h1 id="拷贝构造函数的参数使用非引用，会造成什么后果？"><a href="#拷贝构造函数的参数使用非引用，会造成什么后果？" class="headerlink" title="拷贝构造函数的参数使用非引用，会造成什么后果？"></a>拷贝构造函数的参数使用非引用，会造成什么后果？</h1><p>会造成循环拷贝，因为为了调用拷贝构造函数，需要先创建参数other，创建other时又需要调用拷贝构造函数。</p>
<h1 id="重载函数的返回类型可以不同吗？"><a href="#重载函数的返回类型可以不同吗？" class="headerlink" title="重载函数的返回类型可以不同吗？"></a>重载函数的返回类型可以不同吗？</h1><p>可以，但是前提是参数列表必须不同。</p>
<h1 id="如何解决引用头文件重复问题？"><a href="#如何解决引用头文件重复问题？" class="headerlink" title="如何解决引用头文件重复问题？"></a>如何解决引用头文件重复问题？</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//或者</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> UTILS_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> UTILS_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure>

<h1 id="1G的内存排序1T的文件，文件内全是一行一个int"><a href="#1G的内存排序1T的文件，文件内全是一行一个int" class="headerlink" title="1G的内存排序1T的文件，文件内全是一行一个int"></a>1G的内存排序1T的文件，文件内全是一行一个int</h1><p>K路归并排序，先分成多个文件，每个文件里面1个g去排序。<br>然后合并，每次每个文件出一个值排序。</p>
<h1 id="在析构函数中调用虚函数有什么问题"><a href="#在析构函数中调用虚函数有什么问题" class="headerlink" title="在析构函数中调用虚函数有什么问题"></a>在析构函数中调用虚函数有什么问题</h1><p>派生类可能已经析构，基类在析构函数里调用的虚函数可能是基类版本的，而不是派生类版本的。</p>
<h1 id="map和unordered-map两者区别"><a href="#map和unordered-map两者区别" class="headerlink" title="map和unordered_map两者区别"></a>map和unordered_map两者区别</h1><ul>
<li>map底层用到红黑树，unordered_map用到哈希表</li>
<li>map有排序默认<code>&lt;</code>，umap没有排序</li>
<li>时间复杂度 map是O(logn),umap是O(1),最坏O(N)哈希冲突时</li>
</ul>
<h2 id="umap底层如何实现？"><a href="#umap底层如何实现？" class="headerlink" title="umap底层如何实现？"></a>umap底层如何实现？</h2><p>桶+哈希。桶即动态分配的数组，而每个桶内部存一个链表，用于处理哈希冲突。</p>
<h2 id="除了链表，还有什么方法吗？"><a href="#除了链表，还有什么方法吗？" class="headerlink" title="除了链表，还有什么方法吗？"></a>除了链表，还有什么方法吗？</h2><ul>
<li>开放寻址法<br>  【线性探测】如果被占用，就依次检查i+1&#x2F;i+2…<br>  【二次探测】若i被占用，则找【i+1^2】&#x2F;【i+2^2】…</li>
</ul>
<h1 id="构造和析构函数可以抛出异常吗？"><a href="#构造和析构函数可以抛出异常吗？" class="headerlink" title="构造和析构函数可以抛出异常吗？"></a>构造和析构函数可以抛出异常吗？</h1><p>构造函数可以，然后会逆序析构已经new出来的资源。<br>析构函数不推荐，因为C++11之后默认为noexcept，如果抛出异常会直接崩溃。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdexcept&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Resource</span> &#123;</span><br><span class="line">    ~<span class="built_in">Resource</span>() &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;析构中...\n&quot;</span>;</span><br><span class="line">        <span class="keyword">throw</span> std::<span class="built_in">runtime_error</span>(<span class="string">&quot;析构时出错！&quot;</span>); <span class="comment">// ⚠️ 禁止这样做！</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Resource res;</span><br><span class="line">    &#125; <span class="built_in">catch</span> (...) &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;捕获异常\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如上，抛出异常是不会进入catch的。</p>
]]></content>
      <categories>
        <category>cpp</category>
      </categories>
  </entry>
  <entry>
    <title>快速排序</title>
    <url>/2025/10/13/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/</url>
    <content><![CDATA[<h1 id="挖坑法"><a href="#挖坑法" class="headerlink" title="挖坑法"></a>挖坑法</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">void quick_sort(int a[], int l, int r)</span><br><span class="line">&#123;</span><br><span class="line">    if (l &lt; r)</span><br><span class="line">    &#123;</span><br><span class="line">        int i,j,x;</span><br><span class="line"> </span><br><span class="line">        i = l;</span><br><span class="line">        j = r;</span><br><span class="line">        x = a[i];</span><br><span class="line">        while (i &lt; j)</span><br><span class="line">        &#123;</span><br><span class="line">            while(i &lt; j &amp;&amp; a[j] &gt; x)</span><br><span class="line">                j--; // 从右向左找第一个小于x的数</span><br><span class="line">            if(i &lt; j)</span><br><span class="line">                a[i++] = a[j];</span><br><span class="line">            while(i &lt; j &amp;&amp; a[i] &lt; x)</span><br><span class="line">                i++; // 从左向右找第一个大于x的数</span><br><span class="line">            if(i &lt; j)</span><br><span class="line">                a[j--] = a[i];</span><br><span class="line">        &#125;</span><br><span class="line">        a[i] = x;</span><br><span class="line">        quick_sort(a, l, i-1); /* 递归调用 */</span><br><span class="line">        quick_sort(a, i+1, r); /* 递归调用 */</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>alg</category>
      </categories>
  </entry>
  <entry>
    <title>提升多线程数据处理效率</title>
    <url>/2025/10/29/%E6%8F%90%E5%8D%87%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86%E6%95%88%E7%8E%87/</url>
    <content><![CDATA[<p><strong>如何通过无锁队列（Lock-Free Queue）和SIMD指令集提升多线程数据处理效率？</strong></p>
<span id="more"></span>

<h1 id="核心问题"><a href="#核心问题" class="headerlink" title="核心问题"></a>核心问题</h1><h2 id="总体思路"><a href="#总体思路" class="headerlink" title="总体思路"></a>总体思路</h2><p>提升多线程数据处理效率核心主要在两点：</p>
<ol>
<li>减少等待：最小化线程间因资源竞争导致的阻塞和上下文切换</li>
<li>提升单次操作的数据吞吐量：让CPU在单个时钟周期内处理尽可能多的数据</li>
</ol>
<p>无锁队列主要解决第一点：减少等待；而SIMD则解决第二点，提升吞吐量。</p>
<h2 id="无锁队列"><a href="#无锁队列" class="headerlink" title="无锁队列"></a>无锁队列</h2><p>在多线程编程中，传统队列通常使用互斥锁来保证线程安全。当多个线程同时入队或者出队时，会发生锁竞争，导致线程被挂起，调度，产生大量的上下文切换开销。</p>
<p><strong>无锁队列通过原子操作来实现线程安全，优势如下：</strong></p>
<ol>
<li>非阻塞性：一个线程的执行失败不会导致他被挂起，而是立即重试或者进行其他工作</li>
<li>可伸缩性：随着线程数量增加，无锁队列性能衰减小于有锁队列</li>
<li>避免死锁：不使用锁，避免了死锁</li>
</ol>
<h2 id="SIMD指令集"><a href="#SIMD指令集" class="headerlink" title="SIMD指令集"></a>SIMD指令集</h2><p>SIMD允许CPU用一个指令同时处理多个数据。例如，SSE指令集可以一次处理4个32位浮点数，AVX&#x2F;AVX2可以一次处理8个32位浮点数。</p>
<p><strong>它的优势在于：</strong></p>
<ol>
<li>数据级并行：将循环或批量数据处理操作向量化。例如，对一个数组的所有元素加上一个常数，使用SIMD可以将操作次数减少为原来的1&#x2F;4或1&#x2F;8。</li>
<li>隐藏内存延迟：虽然一次加载多个数据，但内存访问的延迟是类似的，有效提升了内存带宽利用率。</li>
<li>提升指令效率：减少了循环控制和解码指令的开销</li>
</ol>
<p><strong>在消费者线程内的应用：</strong></p>
<p>当消费者线程从无锁队列中取出一批数据（例如，一个包含大量数值的数组）后，真正的计算工作才开始。</p>
<ol>
<li>标量计算：使用常规指令，用循环逐个处理数组中的元素。</li>
<li>SIMD计算：将数组中的数据“打包”到SIMD寄存器中，使用一条指令同时处理多个元素。这直接将计算吞吐量提升了数倍。</li>
</ol>
<p>简单来说，SIMD让每个CPU核心的“数据处理能力”实现了最大化。</p>
<h1 id="原子操作介绍"><a href="#原子操作介绍" class="headerlink" title="原子操作介绍"></a>原子操作介绍</h1><p>在上一节我们讲到无锁队列用到了原子操作，我们这里简要介绍一下原子操作的概念与基本操作。</p>
<h2 id="memory-order"><a href="#memory-order" class="headerlink" title="memory_order"></a>memory_order</h2><p>C++的memory_order共有六种枚举值，从弱到强进行说明：</p>
<ol>
<li><p>memory_order_relaxed</p>
<p>只保证了原子操作的原子性，不提供线程间的同步顺序约束：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">std::atomic&lt;<span class="type">int</span>&gt; <span class="title">x</span><span class="params">(<span class="number">0</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">x.<span class="built_in">store</span>(<span class="number">42</span>,std::memory_order_relaxed);</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> value = x.<span class="built_in">load</span>(std::memory_order_relaxed); </span><br></pre></td></tr></table></figure>

<p>其中，load读到的值可能是旧值或者是新值，无法保证同步。</p>
</li>
<li><p>memory_order_consume</p>
<p>用的很少，这里不介绍了</p>
</li>
<li><p>memory_order_acquire</p>
<p>用于读操作，效果为后续的读写操作不会重排到该acquire操作之前；与另一个线程的release写操作配对，形成同步关系</p>
</li>
<li><p>memory_order_release</p>
<p>用于写操作，之前的读写操作不会重排到release之后</p>
</li>
<li><p>memory_order_acq_rel</p>
<p>用于读改写操作，比如fetch_add操作</p>
</li>
<li><p>memory_order_seq_cst</p>
<p>最严格</p>
</li>
</ol>
<h2 id="应用从atomiccount讲起"><a href="#应用从atomiccount讲起" class="headerlink" title="应用从atomic&lt;int&gt;count讲起"></a>应用从<code>atomic&lt;int&gt;count</code>讲起</h2><ol>
<li><p>把count想象成队列的物品数量</p>
</li>
<li><p>生产者线程一直生产一个物品，然后让count+1</p>
</li>
<li><p>消费者线程不断检查count，如果count&gt;0，就消费一个物品，然后让count-1</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//生产者代码逻辑：</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//在内存中准备物品（比如，data = 42; // 这不是原子操作）</span></span><br><span class="line">count.<span class="built_in">fetch_add</span>(<span class="number">1</span>, memory_order_relaxed); <span class="comment">// 原子地增加计数</span></span><br><span class="line"><span class="comment">//消费者代码逻辑：</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> c = count.<span class="built_in">load</span>(memory_order_relaxed);</span><br><span class="line"><span class="comment">//如果 c &gt; 0，则开始消费 data。</span></span><br></pre></td></tr></table></figure></li>
</ol>
<p><strong>由于指令重排，生产者的步骤1，2可能会顺序颠倒，即消费者读取data的时候，可能data还没有被复制。读到了一个垃圾值</strong></p>
<p>因此要使用memory_order_acquire、memory_order_release</p>
<h2 id="真正的无锁队列示例"><a href="#真正的无锁队列示例" class="headerlink" title="真正的无锁队列示例"></a>真正的无锁队列示例</h2><p>本队列省略了很多边界条件处理，但是示范了核心思想</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;atomic&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 队列节点</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">    <span class="type">int</span> value;</span><br><span class="line">    Node* next;</span><br><span class="line">    <span class="built_in">Node</span>(<span class="type">int</span> val) : <span class="built_in">value</span>(val), <span class="built_in">next</span>(<span class="literal">nullptr</span>) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SimpleLockFreeQueue</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="comment">// 原子指针：队头和队尾</span></span><br><span class="line">    std::atomic&lt;Node*&gt; head;</span><br><span class="line">    std::atomic&lt;Node*&gt; tail;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">SimpleLockFreeQueue</span>() &#123;</span><br><span class="line">        <span class="comment">// 初始化时创建一个哑节点（dummy node），使逻辑更简单</span></span><br><span class="line">        Node* dummy = <span class="keyword">new</span> <span class="built_in">Node</span>(<span class="number">0</span>);</span><br><span class="line">        head.<span class="built_in">store</span>(dummy);</span><br><span class="line">        tail.<span class="built_in">store</span>(dummy);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 生产者：入队</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">enqueue</span><span class="params">(<span class="type">int</span> value)</span> </span>&#123;</span><br><span class="line">        Node* new_node = <span class="keyword">new</span> <span class="built_in">Node</span>(value);</span><br><span class="line">        Node* current_tail = <span class="literal">nullptr</span>;</span><br><span class="line">        Node* next_after_tail = <span class="literal">nullptr</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="comment">// 1. 读取当前尾指针和它指向的节点的next指针</span></span><br><span class="line">            current_tail = tail.<span class="built_in">load</span>(std::memory_order_acquire);</span><br><span class="line">            next_after_tail = current_tail-&gt;next; <span class="comment">// 注意：这里需要确保current_tail有效</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 2. 检查tail是否被其他线程移动了（关键检查！）</span></span><br><span class="line">            <span class="keyword">if</span> (current_tail != tail.<span class="built_in">load</span>(std::memory_order_relaxed)) &#123;</span><br><span class="line">                <span class="keyword">continue</span>; <span class="comment">// 如果被移动了，重试</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 3. 如果tail-&gt;next不为空，说明有线程已经添加了节点但还没更新tail，帮忙推进</span></span><br><span class="line">            <span class="keyword">if</span> (next_after_tail != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">                tail.<span class="built_in">compare_exchange_weak</span>(current_tail, next_after_tail, </span><br><span class="line">                                         std::memory_order_release);</span><br><span class="line">                <span class="keyword">continue</span>; <span class="comment">// 推进后重试</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 4. 核心CAS：尝试将当前尾节点的next指向新节点</span></span><br><span class="line">            <span class="comment">//    如果成功，说明我们抢到了添加权</span></span><br><span class="line">            <span class="keyword">if</span> (std::<span class="built_in">atomic_compare_exchange_weak_explicit</span>(</span><br><span class="line">                &amp;(current_tail-&gt;next), &amp;next_after_tail, new_node,</span><br><span class="line">                std::memory_order_release, std::memory_order_relaxed)) &#123;</span><br><span class="line">                <span class="keyword">break</span>; <span class="comment">// 添加成功，退出循环</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 5. 尝试更新tail指针到新节点（即使失败也没关系，其他线程会帮忙推进）</span></span><br><span class="line">        tail.<span class="built_in">compare_exchange_weak</span>(current_tail, new_node, </span><br><span class="line">                                 std::memory_order_release);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 消费者：出队</span></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">dequeue</span><span class="params">(<span class="type">int</span>&amp; value)</span> </span>&#123;</span><br><span class="line">        Node* current_head = <span class="literal">nullptr</span>;</span><br><span class="line">        Node* current_tail = <span class="literal">nullptr</span>;</span><br><span class="line">        Node* next_after_head = <span class="literal">nullptr</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="comment">// 1. 读取头、尾、头节点的下一个节点</span></span><br><span class="line">            current_head = head.<span class="built_in">load</span>(std::memory_order_acquire);</span><br><span class="line">            current_tail = tail.<span class="built_in">load</span>(std::memory_order_acquire);</span><br><span class="line">            next_after_head = current_head-&gt;next;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 2. 检查head是否被其他线程移动了</span></span><br><span class="line">            <span class="keyword">if</span> (current_head != head.<span class="built_in">load</span>(std::memory_order_relaxed)) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 3. 判断队列是否为空</span></span><br><span class="line">            <span class="keyword">if</span> (current_head == current_tail) &#123;</span><br><span class="line">                <span class="keyword">if</span> (next_after_head == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">// 队列为空</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 有节点但tail没更新，帮忙推进tail</span></span><br><span class="line">                tail.<span class="built_in">compare_exchange_weak</span>(current_tail, next_after_head, </span><br><span class="line">                                         std::memory_order_release);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 4. 队列非空，读取值</span></span><br><span class="line">                value = next_after_head-&gt;value;</span><br><span class="line">                </span><br><span class="line">                <span class="comment">// 5. 核心CAS：尝试将head移动到下一个节点</span></span><br><span class="line">                <span class="keyword">if</span> (head.<span class="built_in">compare_exchange_weak</span>(current_head, next_after_head, </span><br><span class="line">                                             std::memory_order_release)) &#123;</span><br><span class="line">                    <span class="keyword">break</span>; <span class="comment">// 出队成功</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 6. 释放旧的头节点（实际生产环境需要更复杂的内存管理）</span></span><br><span class="line">        <span class="keyword">delete</span> current_head;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试代码</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    SimpleLockFreeQueue queue;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 生产者线程（简化为顺序执行）</span></span><br><span class="line">    queue.<span class="built_in">enqueue</span>(<span class="number">1</span>);</span><br><span class="line">    queue.<span class="built_in">enqueue</span>(<span class="number">2</span>);</span><br><span class="line">    queue.<span class="built_in">enqueue</span>(<span class="number">3</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 消费者线程</span></span><br><span class="line">    <span class="type">int</span> value;</span><br><span class="line">    <span class="keyword">while</span> (queue.<span class="built_in">dequeue</span>(value)) &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Dequeued: &quot;</span> &lt;&lt; value &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>分析生产者函数，第一步先获取尾指针和指向节点的next指针，第二步需要检查尾指针是否已经被移动，如果已经被移动，就重试，第三部检查next指针是否为空，不为空说明还没有更新节点，就使用<code>compare_exchange_weak</code>函数进行帮忙推进。为空的话，就尝试指向新节点，添加成功后可以退出循环并尝试更新tail指针。</p>
<p>消费者函数也对应操作。</p>
<p>其中，最重要的接口就是CAS操作：<code>compare_exchange_weak</code>函数。</p>
<h2 id="compare-exchange-weak"><a href="#compare-exchange-weak" class="headerlink" title="compare_exchange_weak"></a><code>compare_exchange_weak</code></h2><p><code>bool compare_exchange_weak(T&amp; expected, T desired, std::memory_order order = std::memory_order_seq_cst);</code></p>
<p>这个函数是C++无锁编程中最重要的函数，它的作用是如果当前大门上号码牌等于我预期的号码（expected）,则替换为desired，并返回true，否则把*this的内容写进expected，返回false。</p>
<p>代码中还出现了<code>atomic_compare_exchange_weak_explicit</code>函数，是因为大模型生成代码出混淆了，虽然不影响运行，其实也可以用上面那个版本的。这个函数其实核心逻辑和之前讲解的一样，只是参数传递方式不一样。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">_Bool <span class="title">atomic_compare_exchange_weak_explicit</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="keyword">volatile</span> A* obj, </span></span></span><br><span class="line"><span class="params"><span class="function">    C* expected, </span></span></span><br><span class="line"><span class="params"><span class="function">    C desired, </span></span></span><br><span class="line"><span class="params"><span class="function">    memory_order succ, </span></span></span><br><span class="line"><span class="params"><span class="function">    memory_order fail)</span></span>;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>参数解释：</p>
<p>obj：指向原子变量的指针（如 atomic_int*）。<br>expected：指向预期值的指针。这是一个指针，这是与C++版本最大的区别！<br>desired：期望设置的新值。<br>succ：成功时使用的内存序（当比较相等时）。<br>fail：失败时使用的内存序（当比较不相等时）。</p>
</blockquote>
]]></content>
      <categories>
        <category>cpp</category>
      </categories>
  </entry>
  <entry>
    <title>操作系统面试题整理</title>
    <url>/2025/10/12/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E9%9D%A2%E8%AF%95%E9%A2%98%E6%95%B4%E7%90%86/</url>
    <content><![CDATA[<h1 id="线程池实现"><a href="#线程池实现" class="headerlink" title="线程池实现"></a>线程池实现</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;mutex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;condition_variable&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;future&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdexcept&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ThreadPool</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// 构造函数，创建指定数量的工作线程</span></span><br><span class="line">    <span class="built_in">ThreadPool</span>(<span class="type">size_t</span> threads) : <span class="built_in">stop</span>(<span class="literal">false</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; threads; ++i) &#123;</span><br><span class="line">            workers.<span class="built_in">emplace_back</span>([<span class="keyword">this</span>] &#123;</span><br><span class="line">                <span class="keyword">for</span>(;;) &#123;</span><br><span class="line">                    std::function&lt;<span class="built_in">void</span>()&gt; task;</span><br><span class="line">                    &#123;</span><br><span class="line">                        std::unique_lock&lt;std::mutex&gt; <span class="built_in">lock</span>(<span class="keyword">this</span>-&gt;queue_mutex);</span><br><span class="line">                        <span class="keyword">this</span>-&gt;condition.<span class="built_in">wait</span>(lock, [<span class="keyword">this</span>] &#123;</span><br><span class="line">                            <span class="keyword">return</span> <span class="keyword">this</span>-&gt;stop || !<span class="keyword">this</span>-&gt;tasks.<span class="built_in">empty</span>();</span><br><span class="line">                        &#125;);</span><br><span class="line">                        <span class="keyword">if</span>(<span class="keyword">this</span>-&gt;stop &amp;&amp; <span class="keyword">this</span>-&gt;tasks.<span class="built_in">empty</span>())</span><br><span class="line">                            <span class="keyword">return</span>;</span><br><span class="line">                        task = std::<span class="built_in">move</span>(<span class="keyword">this</span>-&gt;tasks.<span class="built_in">front</span>());</span><br><span class="line">                        <span class="keyword">this</span>-&gt;tasks.<span class="built_in">pop</span>();</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="built_in">task</span>();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加任务到线程池</span></span><br><span class="line">    <span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> F, <span class="keyword">class</span>... Args&gt;</span></span><br><span class="line"><span class="function">    <span class="keyword">auto</span> <span class="title">enqueue</span><span class="params">(F&amp;&amp; f, Args&amp;&amp;... args)</span> </span></span><br><span class="line"><span class="function">        -&gt; std::future&lt;<span class="keyword">typename</span> std::result_of&lt;<span class="title">F</span><span class="params">(Args...)</span>&gt;::type&gt; </span>&#123;</span><br><span class="line">        <span class="keyword">using</span> return_type = <span class="keyword">typename</span> std::result_of&lt;<span class="built_in">F</span>(Args...)&gt;::type;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">auto</span> task = std::make_shared&lt;std::packaged_task&lt;<span class="built_in">return_type</span>()&gt;&gt;(</span><br><span class="line">            std::<span class="built_in">bind</span>(std::forward&lt;F&gt;(f), std::forward&lt;Args&gt;(args)...)</span><br><span class="line">        );</span><br><span class="line">            </span><br><span class="line">        std::future&lt;return_type&gt; res = task-&gt;<span class="built_in">get_future</span>();</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="function">std::unique_lock&lt;std::mutex&gt; <span class="title">lock</span><span class="params">(queue_mutex)</span></span>;</span><br><span class="line">            <span class="keyword">if</span>(stop)</span><br><span class="line">                <span class="keyword">throw</span> std::<span class="built_in">runtime_error</span>(<span class="string">&quot;enqueue on stopped ThreadPool&quot;</span>);</span><br><span class="line">            tasks.<span class="built_in">emplace</span>([task]()&#123; (*task)(); &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        condition.<span class="built_in">notify_one</span>();</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 析构函数，等待所有任务完成</span></span><br><span class="line">    ~<span class="built_in">ThreadPool</span>() &#123;</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="function">std::unique_lock&lt;std::mutex&gt; <span class="title">lock</span><span class="params">(queue_mutex)</span></span>;</span><br><span class="line">            stop = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        condition.<span class="built_in">notify_all</span>();</span><br><span class="line">        <span class="keyword">for</span>(std::thread &amp;worker : workers)</span><br><span class="line">            worker.<span class="built_in">join</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    std::vector&lt;std::thread&gt; workers;      <span class="comment">// 工作线程</span></span><br><span class="line">    std::queue&lt;std::function&lt;<span class="type">void</span>()&gt;&gt; tasks; <span class="comment">// 任务队列</span></span><br><span class="line">    std::mutex queue_mutex;                <span class="comment">// 队列互斥锁</span></span><br><span class="line">    std::condition_variable condition;     <span class="comment">// 条件变量</span></span><br><span class="line">    <span class="type">bool</span> stop;                             <span class="comment">// 停止标志</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用示例</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">ThreadPool <span class="title">pool</span><span class="params">(<span class="number">4</span>)</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 提交任务到线程池</span></span><br><span class="line">    <span class="keyword">auto</span> result = pool.<span class="built_in">enqueue</span>([](<span class="type">int</span> answer) &#123; </span><br><span class="line">        <span class="keyword">return</span> answer; </span><br><span class="line">    &#125;, <span class="number">42</span>);</span><br><span class="line">    </span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Result: &quot;</span> &lt;&lt; result.<span class="built_in">get</span>() &lt;&lt; std::endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="read系统调用过程"><a href="#read系统调用过程" class="headerlink" title="read系统调用过程"></a>read系统调用过程</h1><ol>
<li><p>用户态到内核态切换</p>
<ul>
<li>触发系统调用，CPU通过软中断进入内核态</li>
<li>参数验证（fd有效性、buf可写性等）</li>
</ul>
</li>
<li><p>内核处理流程</p>
<ul>
<li>文件系统层：查找file结构体，定位数据位置</li>
<li>VFS层：调用具体文件系统的read方法</li>
<li>块设备层：检查页缓存 → 命中直接返回，未命中触发磁盘IO</li>
</ul>
</li>
<li><p>数据返回</p>
<ul>
<li>DMA传输数据到内核内存</li>
<li>从内核空间拷贝到用户空间buf</li>
<li>更新文件偏移量，返回读取字节数</li>
</ul>
</li>
</ol>
<h1 id="CPU占用率"><a href="#CPU占用率" class="headerlink" title="CPU占用率"></a>CPU占用率</h1><p>在多核系统中，CPU占用率可以超过100%。比如4核CPU，如果一个进程充分利用了所有核心，占用率就是400%。在top命令中，100%代表一个核心的满载。</p>
]]></content>
      <categories>
        <category>os</category>
      </categories>
  </entry>
  <entry>
    <title>模版元编程</title>
    <url>/2025/10/11/%E6%A8%A1%E7%89%88%E5%85%83%E7%BC%96%E7%A8%8B/</url>
    <content><![CDATA[<p>模板元编程TMP是C++在编译期执行计算和类型操作的编程范式，本质是用代码生成代码，核心思想是将运行时计算转移到编译期，从而提升性能，增强类型安全并实现零开销抽象。</p>
<h1 id="核心概念"><a href="#核心概念" class="headerlink" title="核心概念"></a>核心概念</h1><p>元编程，编写操作程序本身的代码，而非直接解决问题。</p>
<h1 id="编译器计算"><a href="#编译器计算" class="headerlink" title="编译器计算"></a>编译器计算</h1><p>所有计算在代码编译阶段完成，运行时无额外开销：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 传统运行时阶乘</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">factorial</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123; </span><br><span class="line">    <span class="keyword">return</span> (n &lt;= <span class="number">1</span>) ? <span class="number">1</span> : n * <span class="built_in">factorial</span>(n<span class="number">-1</span>);  <span class="comment">// 递归消耗栈空间</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 模板元编程实现（编译期计算）</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="type">int</span> N&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Factorial</span> &#123;</span><br><span class="line">    <span class="type">static</span> <span class="keyword">constexpr</span> <span class="type">int</span> value = N * Factorial&lt;N<span class="number">-1</span>&gt;::value;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">template</span> &lt;&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Factorial</span>&lt;<span class="number">0</span>&gt; &#123;</span><br><span class="line">    <span class="type">static</span> <span class="keyword">constexpr</span> <span class="type">int</span> value = <span class="number">1</span>;  <span class="comment">// 递归终止</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 编译时即计算出 Factorial&lt;5&gt;::value = 120</span></span><br></pre></td></tr></table></figure>

<h1 id="模板特化"><a href="#模板特化" class="headerlink" title="模板特化"></a>模板特化</h1><p>为特定类型&#x2F;值提供定制实现，构成TMP的逻辑分支基础：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 通用模板</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">IsPointer</span> &#123;</span><br><span class="line">    <span class="type">static</span> <span class="keyword">constexpr</span> <span class="type">bool</span> value = <span class="literal">false</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 指针类型的特化</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">IsPointer</span>&lt;T*&gt; &#123;</span><br><span class="line">    <span class="type">static</span> <span class="keyword">constexpr</span> <span class="type">bool</span> value = <span class="literal">true</span>;  <span class="comment">// 对指针返回true</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">static_assert</span>(IsPointer&lt;<span class="type">int</span>*&gt;::value, <span class="string">&quot;Must be pointer&quot;</span>);  <span class="comment">// 编译期验证</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>cpp</category>
      </categories>
  </entry>
  <entry>
    <title>数据链路层</title>
    <url>/2025/10/12/%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/</url>
    <content><![CDATA[<h1 id="MAC地址"><a href="#MAC地址" class="headerlink" title="MAC地址"></a>MAC地址</h1><h2 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h2><ol>
<li>唯一标识：全球唯一的硬件地址，在局域网内标识网络设备</li>
<li>帧寻址：在数据链路层，通过源MAC和目标MAC地址，实现了同一网段内设备直接通信</li>
<li>帧过滤：网卡根据收到的帧的目标MAC地址，决定是否接收并上传给上层处理</li>
</ol>
<h2 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h2><p>48位，前24为由IEEE分配给厂商，后24位厂商自行分配</p>
<h1 id="ARP协议"><a href="#ARP协议" class="headerlink" title="ARP协议"></a>ARP协议</h1><ul>
<li>全称：地址解析协议</li>
<li>作用：根据IP地址查询对应的MAC地址</li>
<li>工作原理：<ol>
<li>当主机A需要与同一局域网内主机B通信，A会查询本地ARP缓存表</li>
<li>如果没找到B的MAC地址，A会向局域网广播一个ARP请求包，内容为询问IP地址为x.x.x.x的MAC地址</li>
<li>局域网内所有主机都会收到这个请求，但是IP地址对应的主机会给主机A单播一个ARP回复包，包含自己的MAC地址</li>
<li>主机A收到回复后，将IP-MAC的映射关系存入ARP缓存</li>
</ol>
</li>
</ul>
<h1 id="交换机"><a href="#交换机" class="headerlink" title="交换机"></a>交换机</h1><p>交换机是数据链路层设备，核心工作是基于MAC地址转发数据帧。</p>
<ol>
<li>学习：交换机有一个MAC地址表，记录端口与连接在该端口上设备的MAC地址映射关系</li>
<li>转发，过滤：当交换机收到一个数据帧，则查看其目标MAC地址，在MAC地址表中查找对应的端口<ul>
<li>如果找到了，单播将帧从那个端口转发</li>
<li>如果未找到，则广播所有其他窗口</li>
</ul>
</li>
<li>环路避免：在复杂网络中，使用STP协议来防止广播风暴</li>
</ol>
]]></content>
      <categories>
        <category>cn</category>
      </categories>
  </entry>
  <entry>
    <title>智能指针简述</title>
    <url>/2025/10/11/%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88%E7%AE%80%E8%BF%B0/</url>
    <content><![CDATA[<h1 id="指针指针类型"><a href="#指针指针类型" class="headerlink" title="指针指针类型"></a>指针指针类型</h1><h2 id="unique-ptr"><a href="#unique-ptr" class="headerlink" title="unique_ptr"></a>unique_ptr</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建</span></span><br><span class="line"><span class="keyword">auto</span> ptr = std::<span class="built_in">make_unique</span>&lt;<span class="type">int</span>&gt;(<span class="number">42</span>);</span><br><span class="line"><span class="function">std::unique_ptr&lt;<span class="type">int</span>&gt; <span class="title">ptr2</span><span class="params">(<span class="keyword">new</span> <span class="type">int</span>(<span class="number">100</span>))</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 转移所有权</span></span><br><span class="line">std::unique_ptr&lt;<span class="type">int</span>&gt; ptr3 = std::<span class="built_in">move</span>(ptr);  <span class="comment">// ptr变为空</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 访问</span></span><br><span class="line">*ptr3 = <span class="number">200</span>;        <span class="comment">// 解引用</span></span><br><span class="line">ptr3-&gt;<span class="built_in">someMethod</span>(); <span class="comment">// 成员访问</span></span><br><span class="line">ptr<span class="number">3.</span><span class="built_in">get</span>();         <span class="comment">// 获取原始指针</span></span><br></pre></td></tr></table></figure>

<h2 id="shared-ptr"><a href="#shared-ptr" class="headerlink" title="shared_ptr"></a>shared_ptr</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建</span></span><br><span class="line"><span class="keyword">auto</span> ptr = std::<span class="built_in">make_shared</span>&lt;<span class="type">int</span>&gt;(<span class="number">42</span>);</span><br><span class="line"><span class="function">std::shared_ptr&lt;<span class="type">int</span>&gt; <span class="title">ptr2</span><span class="params">(<span class="keyword">new</span> <span class="type">int</span>(<span class="number">100</span>))</span></span>;  <span class="comment">// 不推荐</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 共享所有权</span></span><br><span class="line"><span class="keyword">auto</span> ptr3 = ptr;  <span class="comment">// 引用计数+1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 检查引用计数</span></span><br><span class="line">cout &lt;&lt; ptr.<span class="built_in">use_count</span>();  <span class="comment">// 输出当前引用数</span></span><br></pre></td></tr></table></figure>

<h2 id="weak-ptr"><a href="#weak-ptr" class="headerlink" title="weak_ptr"></a>weak_ptr</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">std::shared_ptr&lt;<span class="type">int</span>&gt; shared = std::<span class="built_in">make_shared</span>&lt;<span class="type">int</span>&gt;(<span class="number">42</span>);</span><br><span class="line">std::weak_ptr&lt;<span class="type">int</span>&gt; weak = shared;  <span class="comment">// 不增加引用计数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 安全访问</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">auto</span> locked = weak.<span class="built_in">lock</span>()) &#123;  <span class="comment">// 检查对象是否还存在</span></span><br><span class="line">    cout &lt;&lt; *locked &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><h2 id="shared-from-this"><a href="#shared-from-this" class="headerlink" title="shared_from_this"></a>shared_from_this</h2><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><ol>
<li><p>std::enable_shared_from_this 类模板：</p>
<ul>
<li>它是一个基类模板，用于继承。当一个类继承自 <code>std::enable_shared_from_this&lt;T&gt;</code>时，它就具备了安全地从成员函数中返回 this 指针的能力，而不会导致双重删除或悬空指针的问题。</li>
<li>它内部维护了一个弱引用（std::weak_ptr），这个弱引用会在第一个 <code>std::shared_ptr</code> 指向对象时被自动设置。</li>
</ul>
</li>
<li><p>shared_from_this() 成员函数：</p>
<ul>
<li>这是 std::enable_shared_from_this 提供的成员函数。调用它可以返回一个指向当前对象的 std::shared_ptr，前提是当前对象已经被一个 std::shared_ptr 管理。</li>
<li>如果对象不是由 std::shared_ptr 管理的（例如，直接在栈上创建或通过普通指针 new 创建），调用 shared_from_this() 会导致未定义行为（通常是抛出 std::bad_weak_ptr 异常）。</li>
</ul>
</li>
</ol>
<h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><ul>
<li>当一个对象通过 std::make_shared 或 std::shared_ptr 的构造函数被首次管理时，std::enable_shared_from_this 的内部机制会自动将对象的控制块与一个 std::weak_ptr 关联起来。</li>
<li>当你调用 shared_from_this() 时，它会尝试将内部的 std::weak_ptr 升级为 std::shared_ptr。如果升级成功，说明对象仍然被 std::shared_ptr 管理，返回的 std::shared_ptr 会增加引用计数；如果失败（例如，对象已经被销毁），则会抛出异常。</li>
</ul>
<h3 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h3><p>比如定时器回调，要打印日志，但是不保证调用回调的时候还有这个对象。所以用shared_from_this</p>
<h2 id="危险用法"><a href="#危险用法" class="headerlink" title="危险用法"></a>危险用法</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span> : <span class="keyword">public</span> std::enable_shared_from_this&lt;MyClass&gt; &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">doWork</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 正确方式：从this获取shared_ptr</span></span><br><span class="line">        <span class="keyword">auto</span> self = <span class="built_in">shared_from_this</span>();</span><br><span class="line">        <span class="comment">// 传递给异步操作等...</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function">std::shared_ptr&lt;MyClass&gt; <span class="title">getPtr</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">shared_from_this</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line"><span class="keyword">auto</span> obj = std::<span class="built_in">make_shared</span>&lt;MyClass&gt;();</span><br><span class="line">obj-&gt;<span class="built_in">doWork</span>();  <span class="comment">// 安全！</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>cpp</category>
      </categories>
  </entry>
  <entry>
    <title>类型转换</title>
    <url>/2025/10/11/%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/</url>
    <content><![CDATA[<h1 id="static-cast"><a href="#static-cast" class="headerlink" title="static_cast"></a>static_cast</h1><h2 id="适用范围"><a href="#适用范围" class="headerlink" title="适用范围"></a>适用范围</h2><ol>
<li>基本类型转换</li>
<li>继承关系转换</li>
<li>void*和其他类型指针转换</li>
<li>明确的隐式转换</li>
</ol>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 基本类型转换</span></span><br><span class="line"><span class="type">double</span> d = <span class="number">3.14</span>;</span><br><span class="line"><span class="type">int</span> i = <span class="built_in">static_cast</span>&lt;<span class="type">int</span>&gt;(d);  <span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 上行转换（安全）</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Base</span> &#123;&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Derived</span> : <span class="keyword">public</span> Base &#123;&#125;;</span><br><span class="line">Derived* d = <span class="keyword">new</span> <span class="built_in">Derived</span>();</span><br><span class="line">Base* b = <span class="built_in">static_cast</span>&lt;Base*&gt;(d);  <span class="comment">// 安全的向上转换</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 下行转换（不安全，需谨慎）</span></span><br><span class="line">Base* base = <span class="keyword">new</span> <span class="built_in">Base</span>();</span><br><span class="line">Derived* derived = <span class="built_in">static_cast</span>&lt;Derived*&gt;(base);  <span class="comment">// 危险！未检查</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// void* 转换</span></span><br><span class="line"><span class="type">void</span>* ptr = <span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(<span class="type">int</span>));</span><br><span class="line"><span class="type">int</span>* int_ptr = <span class="built_in">static_cast</span>&lt;<span class="type">int</span>*&gt;(ptr);</span><br></pre></td></tr></table></figure>

<h1 id="dynamic-cast"><a href="#dynamic-cast" class="headerlink" title="dynamic_cast"></a>dynamic_cast</h1><h2 id="适用范围-1"><a href="#适用范围-1" class="headerlink" title="适用范围"></a>适用范围</h2><p>安全的下行转换，只能用于具有虚函数的类。</p>
<p>失败时会抛异常，或者返回空指针</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Base</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">func</span><span class="params">()</span> </span>&#123;&#125;  <span class="comment">// 必须有虚函数</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Derived</span> : <span class="keyword">public</span> Base &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">derivedFunc</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 安全的下行转换</span></span><br><span class="line">Base* base = <span class="keyword">new</span> <span class="built_in">Derived</span>();</span><br><span class="line">Derived* derived = <span class="built_in">dynamic_cast</span>&lt;Derived*&gt;(base);</span><br><span class="line"><span class="keyword">if</span>(derived) &#123;</span><br><span class="line">    derived-&gt;<span class="built_in">derivedFunc</span>();  <span class="comment">// 安全调用</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 转换失败的情况</span></span><br><span class="line">Base* base2 = <span class="keyword">new</span> <span class="built_in">Base</span>();</span><br><span class="line">Derived* derived2 = <span class="built_in">dynamic_cast</span>&lt;Derived*&gt;(base2);</span><br><span class="line"><span class="comment">// derived2 == nullptr</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 引用转换（失败时抛异常）</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    Base&amp; base_ref = *base;</span><br><span class="line">    Derived&amp; derived_ref = <span class="built_in">dynamic_cast</span>&lt;Derived&amp;&gt;(base_ref);</span><br><span class="line">&#125; <span class="built_in">catch</span>(<span class="type">const</span> std::bad_cast&amp; e) &#123;</span><br><span class="line">    <span class="comment">// 转换失败</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="const-cast"><a href="#const-cast" class="headerlink" title="const_cast"></a>const_cast</h1><h2 id="适用范围-2"><a href="#适用范围-2" class="headerlink" title="适用范围"></a>适用范围</h2><p>添加或移除const</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 移除const</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> value = <span class="number">42</span>;</span><br><span class="line"><span class="type">int</span>* modifiable = <span class="built_in">const_cast</span>&lt;<span class="type">int</span>*&gt;(&amp;value);</span><br><span class="line">*modifiable = <span class="number">100</span>;  <span class="comment">// 未定义行为！原对象是const</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 正确使用场景</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">legacyFunction</span><span class="params">(<span class="type">int</span>* param)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 旧C函数，不接受const参数</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">modernFunction</span><span class="params">(<span class="type">const</span> <span class="type">int</span>* param)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">legacyFunction</span>(<span class="built_in">const_cast</span>&lt;<span class="type">int</span>*&gt;(param));  <span class="comment">// 临时移除const</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加const</span></span><br><span class="line"><span class="type">int</span> mutable_value = <span class="number">42</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span>* const_ptr = <span class="built_in">const_cast</span>&lt;<span class="type">const</span> <span class="type">int</span>*&gt;(&amp;mutable_value);</span><br></pre></td></tr></table></figure>

<h1 id="reinterpret-cast"><a href="#reinterpret-cast" class="headerlink" title="reinterpret_cast"></a>reinterpret_cast</h1><h2 id="适用范围-3"><a href="#适用范围-3" class="headerlink" title="适用范围"></a>适用范围</h2><p>低级位模式转换，不进行安全检查</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 指针到整数</span></span><br><span class="line"><span class="type">int</span> value = <span class="number">42</span>;</span><br><span class="line"><span class="type">uintptr_t</span> addr = <span class="built_in">reinterpret_cast</span>&lt;<span class="type">uintptr_t</span>&gt;(&amp;value);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 整数到指针</span></span><br><span class="line"><span class="type">void</span>* ptr = <span class="built_in">reinterpret_cast</span>&lt;<span class="type">void</span>*&gt;(addr);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不相关类型指针转换</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">A</span> &#123; <span class="type">int</span> x; &#125;;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">B</span> &#123; <span class="type">double</span> y; &#125;;</span><br><span class="line">A a&#123;<span class="number">42</span>&#125;;</span><br><span class="line">B* b = <span class="built_in">reinterpret_cast</span>&lt;B*&gt;(&amp;a);  <span class="comment">// 危险！位模式重新解释</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数指针转换</span></span><br><span class="line"><span class="built_in">void</span> (*func_ptr)() = <span class="built_in">reinterpret_cast</span>&lt;<span class="built_in">void</span>(*)()&gt;(some_address);</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>cpp</category>
      </categories>
  </entry>
  <entry>
    <title>红烧猪肘</title>
    <url>/2025/10/09/%E7%BA%A2%E7%83%A7%E7%8C%AA%E8%82%98/</url>
    <content><![CDATA[<h1 id="红烧猪肘"><a href="#红烧猪肘" class="headerlink" title="红烧猪肘"></a>红烧猪肘</h1><p>比较简单好吃的菜，记录一下</p>
<h2 id="食材准备"><a href="#食材准备" class="headerlink" title="食材准备"></a>食材准备</h2><ol>
<li>猪肘2-4个，如果有其他菜，两个人吃买两个中等大小的即可。</li>
<li>冰糖，香料（八角 桂皮 香叶 花椒 干辣椒），葱姜，料酒</li>
</ol>
<h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><ol>
<li>猪蹄剁成小块，冷水下锅，加葱姜料酒焯水</li>
<li>热锅凉油下冰糖，炒糖色，注意冰糖不要太多不然不好吃，六粒够了，油也不要太多，颜色不够多加老抽就行</li>
<li>葱姜香料下进去，一勺料酒，一勺老抽，一勺生抽，适量蚝油，大火翻炒均匀</li>
<li>倒开水没过猪蹄，小火炖一个小时，中间可加盐</li>
<li>把香料夹出来，大火收汁，不夹的话可能会发苦</li>
</ol>
]]></content>
      <categories>
        <category>cooking</category>
      </categories>
  </entry>
  <entry>
    <title>线程池</title>
    <url>/2025/10/13/%E7%BA%BF%E7%A8%8B%E6%B1%A0/</url>
    <content><![CDATA[<p>在操作系统那块也写了个线程池，实现方法略有不同，思路是一样的。这里都写一遍</p>
<h1 id="方法1"><a href="#方法1" class="headerlink" title="方法1"></a>方法1</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ThreadPool</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">ThreadPool</span><span class="params">(<span class="type">size_t</span> num_threads)</span>:stop_(false)&#123;</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">size_t</span> i = <span class="number">0</span>;i&lt;num_threads;++i)&#123;</span><br><span class="line">            workers_.<span class="built_in">emplace_back</span>(<span class="built_in">bind</span>(&amp;ThreadPool::worker_loop,<span class="keyword">this</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">ThreadPool</span>()&#123;</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="function">lock_guard&lt;mutex&gt; <span class="title">lock</span><span class="params">(mtx_)</span></span>;</span><br><span class="line">            stop_ = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cv_.<span class="built_in">notify_all</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span>&amp; worker:workers_)&#123;</span><br><span class="line">            worker.<span class="built_in">join</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">enqueue</span><span class="params">(function&lt;<span class="type">void</span>()&gt; task)</span></span>&#123;</span><br><span class="line">        <span class="function">lock_guard&lt;mutex&gt; <span class="title">lock</span><span class="params">(mtx_)</span></span>;</span><br><span class="line">        tasks_.<span class="built_in">push</span>(task);</span><br><span class="line">        cv_.<span class="built_in">notify_one</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">bool</span> stop_;</span><br><span class="line">    vector&lt;thread&gt; workers_;</span><br><span class="line">    mutex mtx_;</span><br><span class="line">    condition_variable cv_;</span><br><span class="line">    queue&lt;function&lt;<span class="type">void</span>()&gt;&gt; tasks_;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">worker_loop</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">            function&lt;<span class="type">void</span>()&gt; task;</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="function">unique_lock&lt;mutex&gt; <span class="title">lock</span><span class="params">(mtx_)</span></span>;</span><br><span class="line">                cv_.<span class="built_in">wait</span>(lock,[<span class="keyword">this</span>]&#123;<span class="keyword">return</span> stop_||!tasks_.<span class="built_in">empty</span>();&#125;);</span><br><span class="line">                <span class="keyword">if</span>(stop_&amp;&amp;tasks.<span class="built_in">empty</span>()) <span class="keyword">return</span>;</span><br><span class="line">                task = tasks.<span class="built_in">front</span>();</span><br><span class="line">                tasks_.<span class="built_in">pop</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">task</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>这个线程池比较清晰，简单，enqueue只能传输返回类型为void的没有参数的函数。</p>
<p>但是也有值得思考的东西：</p>
<ol>
<li><p>lock_guard和unique_lock有啥区别？</p>
<p>lock_guard：功能简单，只能在构造时加锁，析构时解锁<br>unique_lock：功能丰富，支持延迟加锁、手动解锁、转移所有权等 </p>
</li>
<li><p>什么时候一定要用unique_lock？</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. condition_variable::wait()</span></span><br><span class="line">cv_.<span class="built_in">wait</span>(lock, [<span class="keyword">this</span>] &#123; <span class="keyword">return</span> condition; &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 需要手动控制锁的生命周期</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function">unique_lock&lt;mutex&gt; <span class="title">lock</span><span class="params">(mtx_)</span></span>;</span><br><span class="line">    <span class="comment">// ... 做一些工作</span></span><br><span class="line">    lock.<span class="built_in">unlock</span>();  <span class="comment">// 手动解锁</span></span><br><span class="line">    <span class="comment">// ... 做一些不需要锁的工作</span></span><br><span class="line">&#125;  <span class="comment">// 自动解锁</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 延迟加锁</span></span><br><span class="line"><span class="function">unique_lock&lt;mutex&gt; <span class="title">lock</span><span class="params">(mtx_, defer_lock)</span></span>;</span><br><span class="line"><span class="comment">// ... 其他代码</span></span><br><span class="line">lock.<span class="built_in">lock</span>();  <span class="comment">// 稍后加锁</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="方法2"><a href="#方法2" class="headerlink" title="方法2"></a>方法2</h1><p>该方法可以接收任意类型的函数。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;mutex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;condition_variable&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;future&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdexcept&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ThreadPool</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// 构造函数，创建指定数量的工作线程</span></span><br><span class="line">    <span class="built_in">ThreadPool</span>(<span class="type">size_t</span> threads) : <span class="built_in">stop</span>(<span class="literal">false</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; threads; ++i) &#123;</span><br><span class="line">            workers.<span class="built_in">emplace_back</span>([<span class="keyword">this</span>] &#123;</span><br><span class="line">                <span class="keyword">for</span>(;;) &#123;</span><br><span class="line">                    std::function&lt;<span class="built_in">void</span>()&gt; task;</span><br><span class="line">                    &#123;</span><br><span class="line">                        std::unique_lock&lt;std::mutex&gt; <span class="built_in">lock</span>(<span class="keyword">this</span>-&gt;queue_mutex);</span><br><span class="line">                        <span class="keyword">this</span>-&gt;condition.<span class="built_in">wait</span>(lock, [<span class="keyword">this</span>] &#123;</span><br><span class="line">                            <span class="keyword">return</span> <span class="keyword">this</span>-&gt;stop || !<span class="keyword">this</span>-&gt;tasks.<span class="built_in">empty</span>();</span><br><span class="line">                        &#125;);</span><br><span class="line">                        <span class="keyword">if</span>(<span class="keyword">this</span>-&gt;stop &amp;&amp; <span class="keyword">this</span>-&gt;tasks.<span class="built_in">empty</span>())</span><br><span class="line">                            <span class="keyword">return</span>;</span><br><span class="line">                        task = std::<span class="built_in">move</span>(<span class="keyword">this</span>-&gt;tasks.<span class="built_in">front</span>());</span><br><span class="line">                        <span class="keyword">this</span>-&gt;tasks.<span class="built_in">pop</span>();</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="built_in">task</span>();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加任务到线程池</span></span><br><span class="line">    <span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> F, <span class="keyword">class</span>... Args&gt;</span></span><br><span class="line"><span class="function">    <span class="keyword">auto</span> <span class="title">enqueue</span><span class="params">(F&amp;&amp; f, Args&amp;&amp;... args)</span> </span></span><br><span class="line"><span class="function">        -&gt; std::future&lt;<span class="keyword">typename</span> std::result_of&lt;<span class="title">F</span><span class="params">(Args...)</span>&gt;::type&gt; </span>&#123;</span><br><span class="line">        <span class="keyword">using</span> return_type = <span class="keyword">typename</span> std::result_of&lt;<span class="built_in">F</span>(Args...)&gt;::type;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">auto</span> task = std::make_shared&lt;std::packaged_task&lt;<span class="built_in">return_type</span>()&gt;&gt;(</span><br><span class="line">            std::<span class="built_in">bind</span>(std::forward&lt;F&gt;(f), std::forward&lt;Args&gt;(args)...)</span><br><span class="line">        );</span><br><span class="line">            </span><br><span class="line">        std::future&lt;return_type&gt; res = task-&gt;<span class="built_in">get_future</span>();</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="function">std::unique_lock&lt;std::mutex&gt; <span class="title">lock</span><span class="params">(queue_mutex)</span></span>;</span><br><span class="line">            <span class="keyword">if</span>(stop)</span><br><span class="line">                <span class="keyword">throw</span> std::<span class="built_in">runtime_error</span>(<span class="string">&quot;enqueue on stopped ThreadPool&quot;</span>);</span><br><span class="line">            tasks.<span class="built_in">emplace</span>([task]()&#123; (*task)(); &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        condition.<span class="built_in">notify_one</span>();</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 析构函数，等待所有任务完成</span></span><br><span class="line">    ~<span class="built_in">ThreadPool</span>() &#123;</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="function">std::unique_lock&lt;std::mutex&gt; <span class="title">lock</span><span class="params">(queue_mutex)</span></span>;</span><br><span class="line">            stop = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        condition.<span class="built_in">notify_all</span>();</span><br><span class="line">        <span class="keyword">for</span>(std::thread &amp;worker : workers)</span><br><span class="line">            worker.<span class="built_in">join</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    std::vector&lt;std::thread&gt; workers;      <span class="comment">// 工作线程</span></span><br><span class="line">    std::queue&lt;std::function&lt;<span class="type">void</span>()&gt;&gt; tasks; <span class="comment">// 任务队列</span></span><br><span class="line">    std::mutex queue_mutex;                <span class="comment">// 队列互斥锁</span></span><br><span class="line">    std::condition_variable condition;     <span class="comment">// 条件变量</span></span><br><span class="line">    <span class="type">bool</span> stop;                             <span class="comment">// 停止标志</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用示例</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">ThreadPool <span class="title">pool</span><span class="params">(<span class="number">4</span>)</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 提交任务到线程池</span></span><br><span class="line">    <span class="keyword">auto</span> result = pool.<span class="built_in">enqueue</span>([](<span class="type">int</span> answer) &#123; </span><br><span class="line">        <span class="keyword">return</span> answer; </span><br><span class="line">    &#125;, <span class="number">42</span>);</span><br><span class="line">    </span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Result: &quot;</span> &lt;&lt; result.<span class="built_in">get</span>() &lt;&lt; std::endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个新线程池代码比较复杂，本文将逐段讲解：</p>
<ul>
<li><p>工作线程逻辑</p>
<p>和老线程池一样</p>
</li>
<li><p>enqueue函数详解</p>
<ul>
<li><p>函数签名</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> F, <span class="keyword">class</span>... Args&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">auto</span> <span class="title">enqueue</span><span class="params">(F&amp;&amp; f, Args&amp;&amp;... args)</span> </span></span><br><span class="line"><span class="function">    -&gt; std::future&lt;<span class="keyword">typename</span> std::result_of&lt;<span class="title">F</span><span class="params">(Args...)</span>&gt;::type&gt; </span>&#123;</span><br></pre></td></tr></table></figure>

<ol>
<li><code>template&lt;class F, class... Args&gt;</code> - 模板函数，接受任意可调用对象和参数</li>
<li><code>F&amp;&amp; f, Args&amp;&amp;... args</code> -完美转发参数</li>
<li>返回类型是<code>std::future&lt;返回值类型&gt;</code>，用于获取异步结果</li>
</ol>
</li>
<li><p>推导<code>f</code>函数的返回值</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> return_type = <span class="keyword">typename</span> std::result_of&lt;<span class="built_in">F</span>(Args...)&gt;::type;</span><br></pre></td></tr></table></figure>
</li>
<li><p>包装f函数</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">auto</span> task = std::make_shared&lt;std::packaged_task&lt;<span class="built_in">return_type</span>()&gt;&gt;(</span><br><span class="line">    std::<span class="built_in">bind</span>(std::forward&lt;F&gt;(f), std::forward&lt;Args&gt;(args)...)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<ol>
<li>std::bind 将函数和参数绑定成无参函数</li>
<li>std::packaged_task 包装任务，使其能与future关联 </li>
<li>std::shared_ptr 确保任务对象生命周期安全</li>
</ol>
</li>
<li><p>获取与任务关联的future，用于后续获取返回值</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">std::future&lt;return_type&gt; res = task-&gt;<span class="built_in">get_future</span>();</span><br></pre></td></tr></table></figure>
</li>
<li><p>加入任务队列，并返回future</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="function">std::unique_lock&lt;std::mutex&gt; <span class="title">lock</span><span class="params">(queue_mutex)</span></span>;</span><br><span class="line">    <span class="keyword">if</span>(stop)</span><br><span class="line">        <span class="keyword">throw</span> std::<span class="built_in">runtime_error</span>(<span class="string">&quot;enqueue on stopped ThreadPool&quot;</span>);</span><br><span class="line">    tasks.<span class="built_in">emplace</span>([task]()&#123; (*task)(); &#125;);</span><br><span class="line">&#125;</span><br><span class="line">condition.<span class="built_in">notify_one</span>();</span><br><span class="line"><span class="keyword">return</span> res;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<p>packaged_task以及类型擦除在C++专栏中会讲到，这里不重点讲述</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">auto</span> result = pool.<span class="built_in">enqueue</span>([](<span class="type">int</span> answer) &#123; </span><br><span class="line">    <span class="keyword">return</span> answer; </span><br><span class="line">&#125;, <span class="number">42</span>);</span><br></pre></td></tr></table></figure>

<p>在这个工作例子中，auto推导出的类型其实是：<code>std::future&lt;int&gt;</code></p>
]]></content>
      <categories>
        <category>alg</category>
      </categories>
  </entry>
  <entry>
    <title>网络层</title>
    <url>/2025/10/12/%E7%BD%91%E7%BB%9C%E5%B1%82/</url>
    <content><![CDATA[<h1 id="IPv4与IPv6"><a href="#IPv4与IPv6" class="headerlink" title="IPv4与IPv6"></a>IPv4与IPv6</h1><ul>
<li>IPv4：<ul>
<li>地址长度：32位（4字节）</li>
<li>表示方法：点分十进制</li>
<li>地址空间：43亿个</li>
</ul>
</li>
<li>IPv6：<ul>
<li>地址长度：128位</li>
<li>表示方法：冒分十六进制</li>
<li>地址空间：非常大</li>
</ul>
</li>
</ul>
<h1 id="TTL机制"><a href="#TTL机制" class="headerlink" title="TTL机制"></a>TTL机制</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><ul>
<li>全称：生存时间</li>
<li>作用：防止IP数据包在网络中无限循环地传输</li>
</ul>
<h2 id="工作机制"><a href="#工作机制" class="headerlink" title="工作机制"></a>工作机制</h2><ol>
<li>TTL是IP头中的一个字段，初始值通常为64,128或者255</li>
<li>数据包每经过一个路由器，TTL减1</li>
<li>当路由器将TTL减至0，会丢弃该数据包，并向IP地址发送一个ICMP超时消息</li>
</ol>
<h1 id="子网划分与CIDR"><a href="#子网划分与CIDR" class="headerlink" title="子网划分与CIDR"></a>子网划分与CIDR</h1><ul>
<li><strong>CIDR表示法</strong>：无类别域间路由，用于更灵活地分配IP地址。格式为 <code>IP地址/前缀长度</code>，例如 <code>192.168.1.0/24</code>。<ul>
<li><code>/24</code> 表示网络部分占前24位，主机部分占后8位。</li>
<li>可用IP地址数量为 2^8 - 2 &#x3D; 254个（减去网络地址和广播地址）。</li>
</ul>
</li>
<li><strong>划分子网的目的</strong>：<ol>
<li><strong>控制广播域</strong>：缩小广播范围，减少网络中的广播流量（如ARP、DHCP广播），提高网络性能。</li>
<li><strong>提高安全性</strong>：便于在网络边界实施访问控制策略，例如限制不同子网间的访问。</li>
<li><strong>IP地址高效利用</strong>：根据实际需要分配地址空间，避免浪费。</li>
</ol>
</li>
</ul>
<h1 id="路由机制"><a href="#路由机制" class="headerlink" title="路由机制"></a>路由机制</h1><p>路由是网络层的核心功能，指路由器为数据包选择路径的过程。</p>
<ul>
<li><strong>静态路由</strong>：由管理员手动配置路由表。适用于小型、结构稳定的网络。</li>
<li><strong>动态路由协议</strong>：路由器之间自动交换路由信息，动态更新路由表。<ul>
<li><strong>RIP</strong>：基于跳数的距离矢量协议，简单，适用于小型网络。</li>
<li><strong>OSPF</strong>：基于链路状态的协议，收敛快，适用于大型企业网络。</li>
<li><strong>BGP</strong>：路径矢量协议，用于在不同自治系统之间交换路由信息，是互联网的“骨架”协议。</li>
</ul>
</li>
</ul>
<h1 id="ICMP协议"><a href="#ICMP协议" class="headerlink" title="ICMP协议"></a>ICMP协议</h1><ul>
<li><strong>全称</strong>：互联网控制消息协议。</li>
<li><strong>作用</strong>：用于在IP主机、路由器之间传递<strong>控制消息</strong>，如网络通不通、主机是否可达、路由是否可用等。</li>
<li><strong>常见应用</strong>：<ul>
<li><strong>Ping</strong>：利用ICMP回送请求和回送应答消息，测试网络连通性。</li>
<li><strong>Traceroute</strong>：利用ICMP超时消息和目的不可达消息，跟踪数据包路径。</li>
</ul>
</li>
</ul>
<h1 id="NAT"><a href="#NAT" class="headerlink" title="NAT"></a>NAT</h1><ul>
<li><strong>全称</strong>：网络地址转换。</li>
<li><strong>作用</strong>：将私有IP地址转换为公有IP地址，使内网设备可以访问互联网。它有效缓解了IPv4地址短缺问题，并提供了一定的安全隐藏性。</li>
<li><strong>基本过程</strong>：NAT设备（通常是路由器）维护一个转换表。当内网主机发送数据包到外网时，NAT会将数据包的源IP和端口号替换为路由器的公网IP和一个新端口，并将映射关系记录在表中。当收到外网回复时，再根据转换表将目标IP和端口转换回内网主机的地址。</li>
</ul>
<h1 id="IP分片"><a href="#IP分片" class="headerlink" title="IP分片"></a>IP分片</h1><ul>
<li><strong>原因</strong>：当IP数据包的大小超过数据链路层的<strong>最大传输单元（MTU）</strong> 时，就需要进行分片。</li>
<li><strong>过程</strong>：路由器将原始数据包分割成多个较小的<strong>分片</strong>，每个分片都拥有自己的IP头（包含分片相关信息）。这些分片独立传输到目的地后，由目的主机的IP层进行重组。</li>
<li><strong>缺点</strong>：<ul>
<li><strong>性能开销</strong>：每个分片都需要IP头，增加额外负担。</li>
<li><strong>可靠性差</strong>：任何一个分片丢失，都会导致整个原始数据包重传。</li>
</ul>
</li>
<li><strong>优化</strong>：因此，在传输层，TCP协议会通过<strong>MSS（最大报文段长度）</strong> 来主动限制 segment 的大小，从而<strong>避免在IP层发生分片</strong>。</li>
</ul>
<h1 id="面试经典题型"><a href="#面试经典题型" class="headerlink" title="面试经典题型"></a>面试经典题型</h1><h3 id="NAT的工作原理及其优缺点"><a href="#NAT的工作原理及其优缺点" class="headerlink" title="NAT的工作原理及其优缺点"></a><strong>NAT的工作原理及其优缺点</strong></h3><h4 id="参考回答"><a href="#参考回答" class="headerlink" title="参考回答"></a><strong>参考回答</strong></h4><p><strong>NAT</strong>，即网络地址转换，是一种在当今互联网中至关重要的技术。它的核心功能是<strong>将私有IP地址转换为公有IP地址</strong>，使得使用私有地址的内网设备能够访问公共互联网。</p>
<p><strong>一、工作原理</strong></p>
<p>NAT通常运行在连接内网和外网的路由器（即NAT网关）上。其核心是一个<strong>NAT转换表</strong>，记录了内网IP和端口与外网IP和端口的映射关系。最常见的工作模式是<strong>NAPT</strong>，即同时转换IP地址和端口号。</p>
<p>其工作过程可以分为以下几步：</p>
<ol>
<li><p><strong>出站请求（内网 -&gt; 外网）</strong>：</p>
<ul>
<li>当内网主机（例如 <code>192.168.1.100:5000</code>）想要访问外网服务器（例如 <code>203.0.113.1:80</code>）时，它会发送一个IP数据包。</li>
<li>源IP：<code>192.168.1.100</code>，源端口：<code>5000</code></li>
<li>目标IP：<code>203.0.113.1</code>，目标端口：<code>80</code></li>
<li>这个数据包到达NAT路由器。</li>
<li><strong>NAT操作</strong>：路由器会为该连接创建一个NAT表项。它将数据包的<strong>源IP</strong>替换为路由器自己的<strong>公网IP</strong>（例如 <code>198.51.100.1</code>），并分配一个新的<strong>源端口</strong>（例如 <code>10000</code>），然后将这个 <code>(公网IP:新端口, 目标IP:目标端口)</code> 的映射记录在NAT表中。</li>
<li>修改后的数据包发出：源地址变为 <code>198.51.100.1:10000</code>，目标地址不变。</li>
</ul>
</li>
<li><p><strong>NAT转换表记录</strong>：</p>
<ul>
<li><p>路由器内部会生成一条类似这样的映射记录：</p>
<table>
<thead>
<tr>
<th align="left">内网本地地址 (Local)</th>
<th align="left">外网全局地址 (Global)</th>
<th align="left">外部服务器地址 (Remote)</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>192.168.1.100:5000</code></td>
<td align="left"><code>198.51.100.1:10000</code></td>
<td align="left"><code>203.0.113.1:80</code></td>
</tr>
</tbody></table>
</li>
</ul>
</li>
<li><p><strong>入站响应（外网 -&gt; 内网）</strong>：</p>
<ul>
<li>外网服务器 <code>203.0.113.1:80</code> 收到请求后，会回复一个数据包。</li>
<li>源IP：<code>203.0.113.1</code>，源端口：<code>80</code></li>
<li>目标IP：<code>198.51.100.1</code>，目标端口：<code>10000</code>（即N路由器转换后的地址）</li>
<li>这个数据包到达NAT路由器。</li>
<li><strong>NAT操作</strong>：路由器查看目标IP和端口 <code>198.51.100.1:10000</code>，并在NAT表中查找匹配的映射记录。</li>
<li>找到记录后，路由器将数据包的<strong>目标IP</strong>还原为内网主机的 <code>192.168.1.100</code>，<strong>目标端口</strong>还原为 <code>5000</code>。</li>
<li>然后将数据包转发给内网中的原始主机。</li>
</ul>
</li>
</ol>
<p><strong>简单比喻</strong>：NAT就像一个公司的前台总机。公司内部有很多分机（私有IP），但对外只有一个总机号（公有IP）。外部电话打进来要找“小王”，前台需要查表知道“小王”对应的是“分机123”，然后把电话转接进去。</p>
<p><strong>二、优缺点</strong></p>
<p><strong>优点</strong>：</p>
<ol>
<li><strong>缓解IPv4地址枯竭</strong>：这是NAT最重要的作用。一个家庭或企业只需要一个或少数几个公网IP，就可以让成百上千台设备同时上网。</li>
<li><strong>提供基础安全防护</strong>：外部网络无法主动发起对NAT内部特定设备的连接，因为NAT表中没有对应的映射记录。这在一定程度上隐藏了内网拓扑，起到了类似防火墙的作用。</li>
<li><strong>网络部署灵活</strong>：内网可以使用任意的私有地址空间，无需申请公网IP，便于网络规划和变更。</li>
</ol>
<p><strong>缺点</strong>：</p>
<ol>
<li><strong>破坏了端到端通信原则</strong>：这是NAT最大的理论缺陷。互联网设计初衷是任意两台主机都能直接通信，而NAT的介入使得通信必须经过地址转换，变得复杂。</li>
<li><strong>增加了延迟和复杂性</strong>：每个数据包都需要经过修改和查表操作，增加了处理开销和延迟。</li>
<li><strong>导致某些应用兼容性问题</strong>：对于一些复杂的网络协议（如IPsec、FTP的主动模式），它们会在应用层数据中携带IP地址信息，NAT设备无法识别和修改这些内容，导致连接失败。虽然可以通过ALG等技术解决，但增加了复杂性。</li>
<li><strong>对P2P应用不友好</strong>：由于内网主机无法被外网直接访问，建立P2P连接（如视频通话、BT下载）需要借助STUN、TURN等中继服务器，过程复杂。</li>
</ol>
]]></content>
      <categories>
        <category>cn</category>
      </categories>
  </entry>
  <entry>
    <title>计网面试题整理</title>
    <url>/2025/10/12/%E8%AE%A1%E7%BD%91%E9%9D%A2%E8%AF%95%E9%A2%98%E6%95%B4%E7%90%86/</url>
    <content><![CDATA[<h1 id="HTTP请求完整过程"><a href="#HTTP请求完整过程" class="headerlink" title="HTTP请求完整过程"></a>HTTP请求完整过程</h1><ol>
<li><p>DNS域名解析</p>
<p><strong>详细过程（递归查询 + 迭代查询）：</strong></p>
<ol>
<li><strong>浏览器缓存</strong>：浏览器首先检查自己的缓存中是否有该域名的IP记录。</li>
<li><strong>操作系统缓存</strong>：如果浏览器缓存没有，浏览器会调用系统调用（如 <code>gethostbyname</code>），检查操作系统的Hosts文件和缓存。</li>
<li><strong>路由器缓存</strong>：请求会发送到本地路由器，路由器也可能缓存了DNS信息。</li>
<li><strong>ISP的DNS服务器</strong>：如果以上都没有，请求会发送到互联网服务提供商（ISP）的DNS服务器（也称为本地DNS服务器）。这是<strong>递归查询</strong>的开始，本地DNS服务器会负责帮我们找到答案。</li>
<li><strong>根域名服务器</strong>：本地DNS服务器首先询问根域名服务器（<code>.</code>）。根服务器不解析具体域名，但它会返回负责 <code>.com</code> 顶级域的顶级域名服务器的地址。</li>
<li><strong>顶级域名服务器</strong>：本地DNS服务器接着询问 <code>.com</code> 顶级域名服务器。该服务器返回负责 <code>baidu.com</code> 的权威域名服务器的地址。</li>
<li><strong>权威域名服务器</strong>：本地DNS服务器最后询问 <code>baidu.com</code> 的权威域名服务器。该服务器返回 <code>www.baidu.com</code> 的真正IP地址。</li>
<li><strong>缓存并返回</strong>：本地DNS服务器收到IP后，会将其缓存起来（根据TTL值），然后将结果返回给操作系统，再最终返回给浏览器。</li>
</ol>
</li>
<li><p>建立TCP连接</p>
<p>拿到IP地址后，浏览器会通过操作系统协议栈，选择一个随机的源端口（例如 50000），向目标服务器的80端口（HTTP）或443端口（HTTPS）发起TCP连接。</p>
<p><strong>经典的三次握手：</strong></p>
<ol>
<li><strong>SYN</strong>： 客户端发送一个SYN&#x3D;1的TCP报文，序列号为随机数 <code>seq = J</code>，表示请求建立连接。</li>
<li><strong>SYN-ACK</strong>： 服务器收到后，如果同意连接，会回复一个SYN&#x3D;1和ACK&#x3D;1的报文。确认号为 <code>ack = J+1</code>，同时自己也选择一个随机序列号 <code>seq = K</code>。</li>
<li><strong>ACK</strong>： 客户端收到服务器的回复后，再发送一个ACK&#x3D;1的报文。确认号为 <code>ack = K+1</code>，序列号为 <code>seq = J+1</code>。</li>
</ol>
<p>至此，连接建立。双方确认了彼此的<strong>发送和接收能力是正常的</strong>。</p>
</li>
<li><p>发起HTTP&#x2F;HTTPS请求</p>
<p>连接建立后，浏览器就可以发送HTTP请求了。</p>
<p><strong>对于HTTPS（更常见的情况），还需要额外的步骤：</strong></p>
<ol>
<li><p><strong>TLS握手</strong>：在HTTP通信开始前，先进行TLS握手，建立安全加密通道。</p>
<ul>
<li><strong>Client Hello</strong>： 客户端向服务器发送支持的TLS版本、加密套件列表和一个随机数。</li>
<li><strong>Server Hello</strong>： 服务器选择TLS版本和加密套件，并发送自己的数字证书和一个随机数。</li>
<li><strong>验证证书</strong>： 客户端验证服务器证书的合法性（是否由可信CA签发，域名是否匹配，是否在有效期内）。</li>
<li><strong>生成会话密钥</strong>： 客户端用证书中的公钥加密一个预备主密钥发送给服务器。</li>
<li><strong>生成会话密钥</strong>： 服务器用私钥解密后，双方利用三个随机数（客户端、服务器、预备主密钥）生成相同的对称会话密钥。</li>
<li><strong>加密通信</strong>： 后续的HTTP通信将使用这个对称密钥进行加密。</li>
</ul>
</li>
<li><p><strong>发送HTTP请求报文</strong>：</p>
<p>http</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET / HTTP/1.1</span><br><span class="line">Host: www.baidu.com</span><br><span class="line">Connection: keep-alive</span><br><span class="line">User-Agent: Mozilla/5.0...</span><br><span class="line">Accept: text/html,application/xhtml+xml...</span><br><span class="line">Accept-Encoding: gzip, deflate, br</span><br><span class="line">Cookie: ... （如果有之前存储的Cookie，会一并发送）</span><br></pre></td></tr></table></figure>



<ul>
<li>请求行：方法（GET&#x2F;POST）、URL路径、协议版本。</li>
<li>请求头：包含大量元信息，如主机、浏览器类型、可接受的压缩格式等。</li>
<li>请求体：对于GET请求通常为空，POST请求则包含提交的数据。</li>
</ul>
</li>
</ol>
</li>
<li><p>传输层封装</p>
<p><strong>封装报文段</strong>：将HTTP请求报文作为<strong>数据</strong>，在前面加上<strong>TCP头</strong>。</p>
<ul>
<li><strong>TCP头关键信息</strong>：<ul>
<li><strong>源端口</strong>、<strong>目标端口</strong>（如80）：让服务器知道这个请求要交给哪个进程（如Nginx）。</li>
<li><strong>序列号</strong>：保证数据包的有序性。</li>
<li><strong>确认号</strong>：用于可靠传输的确认机制。</li>
<li><strong>窗口大小</strong>：用于流量控制。</li>
</ul>
</li>
</ul>
<p>此时，数据包变成了 <strong>TCP报文段</strong>。</p>
</li>
<li><p>网络层封装</p>
<p><strong>封装IP数据报</strong>：将TCP报文段作为<strong>数据</strong>，在前面加上<strong>IP头</strong>。</p>
<ul>
<li><strong>IP头关键信息</strong>：<ul>
<li><strong>源IP地址</strong>：你的电脑的公网IP（经过NAT转换后）。</li>
<li><strong>目标IP地址</strong>：<code>www.baidu.com</code> 的服务器IP（如 <code>14.215.177.39</code>）。</li>
<li><strong>TTL</strong>：生存时间，每经过一个路由器减1，防止数据包在网络中无限循环。</li>
</ul>
</li>
</ul>
<p>此时，数据包变成了 <strong>IP数据报</strong>。</p>
<p><strong>路径选择</strong>：根据目标IP地址，操作系统通过<strong>路由表</strong>确定这个数据包应该发送给哪个<strong>网关</strong>（通常是你的家庭路由器的IP）。</p>
</li>
<li><p>数据链路层物理层封装</p>
<p><strong>封装以太网帧</strong>：将IP数据报作为<strong>数据</strong>，在前面加上<strong>以太网帧头</strong>，在后面加上<strong>帧尾</strong>。</p>
<ul>
<li><strong>帧头关键信息</strong>：<ul>
<li><strong>目标MAC地址</strong>：下一跳设备的MAC地址。在发送前，需要通过<strong>ARP协议</strong>查询到网关路由器接口的MAC地址。</li>
<li><strong>源MAC地址</strong>：你电脑的网卡MAC地址。</li>
<li><strong>类型</strong>：0x0800，表示帧内封装的是IP协议的数据。</li>
</ul>
</li>
</ul>
<p>此时，数据包变成了 <strong>以太网帧</strong>。</p>
<p><strong>物理层传输</strong>：网卡驱动程序将以太网帧转换成<strong>高低电压（有线）或无线电波（无线）</strong>，通过物理介质发送出去。</p>
</li>
<li><p>在互联网发送（通过路由器）</p>
<ol>
<li>你的家庭路由器收到以太网帧后，<strong>解封装</strong>，去掉以太网帧头帧尾，得到IP数据报。</li>
<li>路由器检查目标IP地址，发现不是发给自己的，于是查找自己的<strong>路由表</strong>，决定下一个出口（比如你的ISP的某个路由接口）。</li>
<li>路由器将IP数据报<strong>重新封装</strong>成新的以太网帧（或PPP帧等），这个新帧的<strong>源MAC地址</strong>是路由器出口的MAC地址，<strong>目标MAC地址</strong>是下一跳路由器的MAC地址。</li>
<li>这个过程在网络中会重复多次，数据包经过一个个路由器（跳点），<strong>IP地址不变，但MAC地址在每一跳都在改变</strong>，直到最终到达目标服务器所在的网络。</li>
</ol>
</li>
<li><p>服务器处理请求并返回响应</p>
<ol>
<li><p><strong>Web服务器处理</strong>：服务器（如Nginx）接收到请求，根据配置将请求转发给后端的应用服务器（如Tomcat, uWSGI）或直接返回静态文件。</p>
</li>
<li><p><strong>应用服务器处理</strong>：应用服务器（如运行着百度搜索逻辑的程序）处理业务，可能查询数据库、调用缓存、进行运算等。</p>
</li>
<li><p><strong>返回HTTP响应</strong>：</p>
<p>http</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Content-Type: text/html; charset=utf-8</span><br><span class="line">Content-Encoding: gzip</span><br><span class="line">Set-Cookie: ... （可能需要设置新的Cookie）</span><br><span class="line">Cache-Control: ... （缓存控制）</span><br><span class="line"></span><br><span class="line">&lt;!DOCTYPE html&gt;... （经过gzip压缩的HTML内容）</span><br></pre></td></tr></table></figure>



<ul>
<li>状态行：状态码（200 OK, 404 Not Found等）。</li>
<li>响应头：内容类型、编码、Cookie、缓存指令等。</li>
<li>响应体：请求的真正资源，通常是HTML文档。</li>
</ul>
</li>
</ol>
</li>
<li><p>浏览器前端解析</p>
</li>
<li><p>断开TCP连接</p>
<p>当页面加载完成，且不需要保持长连接时，TCP连接会关闭。</p>
<p><strong>经典的四次挥手：</strong></p>
<ol>
<li><strong>FIN</strong>： 客户端（主动关闭方）发送FIN&#x3D;1的报文，表示自己没有数据要发送了。</li>
<li><strong>ACK</strong>： 服务器收到FIN后，回复一个ACK进行确认。此时，从客户端到服务器的连接关闭。</li>
<li><strong>FIN</strong>： 服务器处理完所有数据后，也发送一个FIN&#x3D;1的报文给客户端，表示服务器也没有数据要发送了。</li>
<li><strong>ACK</strong>： 客户端收到服务器的FIN后，回复一个ACK进行确认。等待一段时间（2MSL，Maximum Segment Lifetime）后，连接彻底关闭。</li>
</ol>
</li>
</ol>
<h1 id="I-O多路复用三种方法的比较"><a href="#I-O多路复用三种方法的比较" class="headerlink" title="I&#x2F;O多路复用三种方法的比较"></a>I&#x2F;O多路复用三种方法的比较</h1><ul>
<li><table>
<thead>
<tr>
<th align="left">特性</th>
<th align="left">select</th>
<th align="left">poll</th>
<th align="left">epoll (Linux) &#x2F; kqueue (BSD)</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><strong>底层机制</strong></td>
<td align="left">轮询所有fd</td>
<td align="left">轮询所有fd</td>
<td align="left">回调函数，事件驱动</td>
</tr>
<tr>
<td align="left"><strong>最大连接数</strong></td>
<td align="left">有限制 (通常1024)</td>
<td align="left">无限制</td>
<td align="left">无限制</td>
</tr>
<tr>
<td align="left"><strong>效率</strong></td>
<td align="left">连接数增加时线性下降</td>
<td align="left">连接数增加时线性下降</td>
<td align="left">连接数增加时无明显下降</td>
</tr>
<tr>
<td align="left"><strong>工作模式</strong></td>
<td align="left">仅水平触发(LT)</td>
<td align="left">仅水平触发(LT)</td>
<td align="left">支持边缘触发(ET)和水平触发(LT)</td>
</tr>
<tr>
<td align="left"><strong>内核态-用户态拷贝</strong></td>
<td align="left">每次调用都拷贝fd集合</td>
<td align="left">每次调用都拷贝fd集合</td>
<td align="left">使用内存映射(mmap)，只需拷贝一次</td>
</tr>
</tbody></table>
</li>
<li><p><strong>面试回答要点：</strong></p>
</li>
<li><p><strong>核心区别</strong>：<code>select/poll</code> 是 <strong>“轮询”</strong> 机制，每次调用都需要将所有监听的文件描述符从用户态拷贝到内核态，并由内核进行线性扫描。<code>epoll</code> 是 <strong>“事件回调”</strong> 机制，内核维护一个事件表，只返回就绪的事件，效率更高。</p>
</li>
<li><p><strong>水平触发 vs 边缘触发</strong>：</p>
<ul>
<li><strong>LT</strong>：只要文件描述符处于就绪状态（如读缓冲区非空），每次调用 <code>epoll_wait</code> 都会通知你。编程更简单，不容易遗漏事件。</li>
<li><strong>ET</strong>：只有当文件描述符状态发生变化时（如从不可读变为可读），才会通知一次。效率更高，但要求程序员必须一次性将数据读完&#x2F;写完，否则会丢失事件。</li>
</ul>
</li>
<li><p><strong>ET模式如何避免丢事件</strong>：</p>
<ul>
<li>必须使用<strong>非阻塞IO</strong>。</li>
<li>在读取时，必须<strong>循环读取</strong>，直到返回 <code>EAGAIN</code> 或 <code>EWOULDBLOCK</code> 错误，确保将本次可读的数据全部读完。</li>
</ul>
</li>
</ul>
<h1 id="TCP粘包-拆包问题"><a href="#TCP粘包-拆包问题" class="headerlink" title="TCP粘包&#x2F;拆包问题"></a>TCP粘包&#x2F;拆包问题</h1><p><strong>问题根源</strong>：TCP是面向字节流的协议，没有消息边界。它只保证数据的有序和可靠，不保证应用层数据包的完整性。</p>
<p><strong>解决方案（定义应用层协议）：</strong></p>
<ol>
<li><strong>定长消息</strong>：每个消息都是固定长度。简单，但不够灵活，可能浪费带宽。</li>
<li><strong>分隔符</strong>：在每个消息末尾加上特殊分隔符（如 <code>\r\n</code>）。需要转义机制。</li>
<li><strong>长度字段 + 消息体</strong>：这是最常用、最有效的方法。<ul>
<li>在消息头中定义一个固定长度的字段，用来表示消息体的长度。</li>
<li>接收方先读取固定长度的头，解析出消息体长度，再读取指定长度的数据。</li>
</ul>
</li>
</ol>
<h1 id="大量TIME-WAIT状态"><a href="#大量TIME-WAIT状态" class="headerlink" title="大量TIME_WAIT状态"></a>大量TIME_WAIT状态</h1><p><strong>产生原因</strong>：<strong>主动关闭连接的一方</strong>会进入 <code>TIME_WAIT</code> 状态，持续 <strong>2MSL</strong>（报文最大生存时间，通常为60秒）。它的作用是：</p>
<ul>
<li>可靠地终止TCP连接（确保最后的ACK能到达）。</li>
<li>让旧连接的重复报文在网络中消逝，避免被新连接错误接收。</li>
</ul>
<p><strong>服务器端出现大量TIME_WAIT的影响</strong>：耗尽本地端口资源，无法建立新的对外连接。</p>
<p><strong>解决方案</strong>：</p>
<ol>
<li><strong>首选：优化应用设计</strong><ul>
<li>使用<strong>长连接</strong>（如HTTP Keep-Alive，数据库连接池），避免频繁创建和关闭短连接。</li>
<li>将关闭连接的主动权交给客户端（让客户端进入 <code>TIME_WAIT</code>）。</li>
</ul>
</li>
<li>如果是客户端突然断电<ul>
<li><strong>应用层心跳</strong><ul>
<li>在应用层自己实现一个心跳协议，比如客户端每30秒发送一个“PING”消息，服务端回复“PONG”。</li>
<li>如果服务端连续几次没收到心跳，就主动断开连接。这种方式更及时、更灵活。</li>
</ul>
</li>
</ul>
</li>
</ol>
<h1 id="大文件传输为什么选tcp"><a href="#大文件传输为什么选tcp" class="headerlink" title="大文件传输为什么选tcp"></a>大文件传输为什么选tcp</h1><ol>
<li><p>可靠性</p>
<p>UDP不保证数据一定到达，也不保证顺序，任何一个字节的丢失或者错序都会导致文件损坏</p>
</li>
<li><p>流量控制</p>
<p>TCP的滑动窗口机制能根据接收方的处理能力动态调整发送速率，防止快发送方淹没慢接收方</p>
</li>
<li><p>拥塞控制</p>
<p>TCP能感知网络拥堵并主动降低发送速率，保证整个网络的稳定，避免“网络风暴”。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>cn</category>
      </categories>
  </entry>
  <entry>
    <title>网络分层模型</title>
    <url>/2025/10/12/%E7%BD%91%E7%BB%9C%E5%88%86%E5%B1%82%E6%A8%A1%E5%9E%8B/</url>
    <content><![CDATA[<h1 id="OSI七层模型"><a href="#OSI七层模型" class="headerlink" title="OSI七层模型"></a>OSI七层模型</h1><p>OSI模型是一个理论的标准，将网络通信划分为七个层次，从下到上分别为：</p>
<table>
<thead>
<tr>
<th align="left">层次</th>
<th align="left">名称</th>
<th align="left">核心功能</th>
<th align="left">数据单位</th>
<th align="left">典型设备&#x2F;协议</th>
</tr>
</thead>
<tbody><tr>
<td align="left">第1层</td>
<td align="left">物理层</td>
<td align="left">传输原始比特流，定义电气、机械规格</td>
<td align="left">比特</td>
<td align="left">网线、光纤、中继器</td>
</tr>
<tr>
<td align="left">第2层</td>
<td align="left">数据链路层</td>
<td align="left"><strong>局域网内</strong>通过MAC地址通信，差错检测</td>
<td align="left"><strong>帧</strong></td>
<td align="left"><strong>交换机</strong>、网桥</td>
</tr>
<tr>
<td align="left">第3层</td>
<td align="left">网络层</td>
<td align="left"><strong>跨网络</strong>的逻辑寻址和路由选择</td>
<td align="left"><strong>数据包</strong></td>
<td align="left"><strong>路由器</strong>、IP、ICMP、ARP</td>
</tr>
<tr>
<td align="left">第4层</td>
<td align="left">传输层</td>
<td align="left"><strong>端到端</strong>的通信，可靠性、流量控制</td>
<td align="left"><strong>段</strong></td>
<td align="left">TCP、UDP</td>
</tr>
<tr>
<td align="left">第5层</td>
<td align="left">会话层</td>
<td align="left">建立、管理和终止应用程序间的会话</td>
<td align="left">-</td>
<td align="left">-</td>
</tr>
<tr>
<td align="left">第6层</td>
<td align="left">表示层</td>
<td align="left">数据格式转换、加密解密、压缩解压缩</td>
<td align="left">-</td>
<td align="left">-</td>
</tr>
<tr>
<td align="left">第7层</td>
<td align="left">应用层</td>
<td align="left">为应用程序提供网络服务接口</td>
<td align="left">-</td>
<td align="left"></td>
</tr>
</tbody></table>
<h1 id="TCP-IP四层模型"><a href="#TCP-IP四层模型" class="headerlink" title="TCP&#x2F;IP四层模型"></a>TCP&#x2F;IP四层模型</h1><p>这个是互联网实际标准，可以看作OSI模型的简化和合并</p>
<table>
<thead>
<tr>
<th align="left">TCP&#x2F;IP 四层模型</th>
<th align="left">对应的 OSI 层</th>
<th align="left">核心协议</th>
</tr>
</thead>
<tbody><tr>
<td align="left">应用层</td>
<td align="left">应用层、表示层、会话层</td>
<td align="left">HTTP, FTP, DNS, SMTP</td>
</tr>
<tr>
<td align="left">传输层</td>
<td align="left">传输层</td>
<td align="left">TCP, UDP</td>
</tr>
<tr>
<td align="left">网络层</td>
<td align="left">网络层</td>
<td align="left">IP, ICMP, ARP</td>
</tr>
<tr>
<td align="left">网络接口层</td>
<td align="left">数据链路层、物理层</td>
<td align="left">Ethernet, WiFi</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>cn</category>
      </categories>
  </entry>
  <entry>
    <title>进程与线程</title>
    <url>/2025/10/11/%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B/</url>
    <content><![CDATA[<h1 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h1><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>进程是程序的一次执行过程，是系统进行资源分配和调度的一个独立单位</p>
<h3 id="组成"><a href="#组成" class="headerlink" title="组成"></a>组成</h3><p>程序段</p>
<p>数据段</p>
<p>进程控制块（PCB）</p>
<h3 id="PCB"><a href="#PCB" class="headerlink" title="PCB"></a>PCB</h3><p>他描述了进程的基本信息和运行状态</p>
<p>是进程存在的唯一标识</p>
<p>包含了进程ID，状态，优先级等信息</p>
<h2 id="进程的状态和切换"><a href="#进程的状态和切换" class="headerlink" title="进程的状态和切换"></a>进程的状态和切换</h2><ul>
<li>常见五状态模型<ol>
<li>创建</li>
<li>就绪</li>
<li>运行</li>
<li>阻塞</li>
<li>结束</li>
</ol>
</li>
<li>状态转换场景<ol>
<li>2-&gt;3：被调度器选中</li>
<li>3-&gt;2：时间片用完</li>
<li>3-&gt;4：等待IO，信号量等资源</li>
<li>4-&gt;2：资源就绪或者被唤醒</li>
</ol>
</li>
</ul>
<h2 id="进程的上下文切换"><a href="#进程的上下文切换" class="headerlink" title="进程的上下文切换"></a>进程的上下文切换</h2><h3 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h3><p>从一个进程切换到另一个进程执行的过程</p>
<h3 id="切换内容"><a href="#切换内容" class="headerlink" title="切换内容"></a>切换内容</h3><ul>
<li>用户资源：虚拟内存，栈，全局变量</li>
<li>内核资源：内核栈，寄存器，PCB</li>
</ul>
<h3 id="触发场景"><a href="#触发场景" class="headerlink" title="触发场景"></a>触发场景</h3><ul>
<li>时间片耗尽</li>
<li>进程阻塞</li>
<li>更高优先级的进程就绪</li>
</ul>
<h2 id="进程的控制操作"><a href="#进程的控制操作" class="headerlink" title="进程的控制操作"></a>进程的控制操作</h2><h3 id="进程创建"><a href="#进程创建" class="headerlink" title="进程创建"></a>进程创建</h3><ol>
<li>分配唯一PCB</li>
<li>分配资源（内存，文件）</li>
<li>初始化PCB（状态，程序计数器等）</li>
<li>将PCB插入就绪队列</li>
</ol>
<h3 id="进程终止"><a href="#进程终止" class="headerlink" title="进程终止"></a>进程终止</h3><ol>
<li>根据ID找到PCB</li>
<li>如果正在运行，立即终止（如果不在运行时，也是立即改为终止状态），释放CPU</li>
<li>如果有子进程，交给init进程接管</li>
<li>释放所有资源</li>
<li>将PCB队列中删除</li>
</ol>
<h3 id="进程阻塞"><a href="#进程阻塞" class="headerlink" title="进程阻塞"></a>进程阻塞</h3><ol>
<li>找到对应PCB</li>
<li>保存现场，状态改为阻塞</li>
<li>插入阻塞队列</li>
<li>调度其他就绪进程</li>
</ol>
<h3 id="进程唤醒"><a href="#进程唤醒" class="headerlink" title="进程唤醒"></a>进程唤醒</h3><ol>
<li>从阻塞队列找到PCB</li>
<li>移除阻塞队列，状态改为就绪</li>
<li>插入就绪队列等待调度</li>
</ol>
<h2 id="进程调度算法"><a href="#进程调度算法" class="headerlink" title="进程调度算法"></a>进程调度算法</h2><p>注意，线程调度也会用到这些类似算法</p>
<h3 id="非抢占"><a href="#非抢占" class="headerlink" title="非抢占"></a>非抢占</h3><ol>
<li>先来先服务</li>
<li>短作业优先</li>
<li>高响应比优先</li>
</ol>
<h3 id="抢占"><a href="#抢占" class="headerlink" title="抢占"></a>抢占</h3><ol>
<li>时间片轮转</li>
<li>最高优先级调度</li>
<li>多级队列调度</li>
</ol>
<h2 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h2><h3 id="死锁产生的四个必要条件"><a href="#死锁产生的四个必要条件" class="headerlink" title="死锁产生的四个必要条件"></a>死锁产生的四个必要条件</h3><ul>
<li><strong>互斥</strong>：资源只能被一个进程占用</li>
<li><strong>占有并等待</strong>：进程已持有资源，同时等待其他资源</li>
<li><strong>不可抢占</strong>：资源只能由持有者释放</li>
<li><strong>循环等待</strong>：进程之间形成资源等待环</li>
</ul>
<h3 id="死锁处理方式"><a href="#死锁处理方式" class="headerlink" title="死锁处理方式"></a>死锁处理方式</h3><ul>
<li><strong>预防</strong>：破坏四个必要条件之一</li>
<li><strong>避免</strong>：银行家算法，动态检查资源分配状态</li>
<li><strong>检测与恢复</strong>：检测是否存在环路，并强制释放资源</li>
</ul>
<h3 id="同步问题"><a href="#同步问题" class="headerlink" title="同步问题"></a>同步问题</h3><h4 id="哲学家就餐问题"><a href="#哲学家就餐问题" class="headerlink" title="哲学家就餐问题"></a>哲学家就餐问题</h4><ul>
<li>多个哲学家竞争有限的叉子（资源）</li>
<li>解决方案：限制同时就餐人数、资源分级分配、使用信号量</li>
</ul>
<h4 id="读者-写者问题"><a href="#读者-写者问题" class="headerlink" title="读者-写者问题"></a>读者-写者问题</h4><ul>
<li>多个读者可同时读，写者必须独占</li>
<li>解决方案：读者优先、写者优先、公平调度</li>
</ul>
<h1 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h1><h2 id="基本定义"><a href="#基本定义" class="headerlink" title="基本定义"></a>基本定义</h2><p>线程是操作系统能够进行运算调度的最小单位，他被包含在进程之中，是进程中实际运作单位。</p>
<ul>
<li>线程是CPU调度和分配的基本单位</li>
<li>一个进程可以有一个或多个线程，他们共享进程的资源</li>
<li>每个线程有自己独立的线程ID，程序计数器</li>
</ul>
<h1 id="进程-vs-线程"><a href="#进程-vs-线程" class="headerlink" title="进程 vs 线程"></a>进程 vs 线程</h1><table>
<thead>
<tr>
<th align="left">维度</th>
<th align="left">进程</th>
<th align="left">线程</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><strong>资源拥有</strong></td>
<td align="left">资源分配的基本单位，拥有独立的地址空间、文件、信号等资源</td>
<td align="left">不拥有系统资源，共享其所属进程的全部资源</td>
</tr>
<tr>
<td align="left"><strong>调度单位</strong></td>
<td align="left">独立调度单位，由操作系统内核进行进程调度</td>
<td align="left">独立调度和分配的基本单位，由操作系统内核进行线程调度</td>
</tr>
<tr>
<td align="left"><strong>系统开销</strong></td>
<td align="left">上下文切换需要切换内存地址空间，开销大（Cache、TLB失效）</td>
<td align="left">上下文切换仅需保存寄存器、栈等少量资源，开销小</td>
</tr>
<tr>
<td align="left"><strong>通信方式</strong></td>
<td align="left">管道、消息队列、共享内存、信号量、信号、Socket等</td>
<td align="left">读写同一进程的全局数据、互斥锁、条件变量、信号量等</td>
</tr>
<tr>
<td align="left"><strong>健壮性</strong></td>
<td align="left">一个进程崩溃不会影响其他进程</td>
<td align="left">一个线程崩溃会导致整个进程崩溃</td>
</tr>
<tr>
<td align="left"><strong>C++实现</strong></td>
<td align="left"><code>fork()</code>、<code>std::process</code> (C++20)</td>
<td align="left"><code>std::thread</code>、<code>pthreads</code></td>
</tr>
</tbody></table>
<h1 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h1><h2 id="进程-1"><a href="#进程-1" class="headerlink" title="进程"></a>进程</h2><h3 id="普通问题"><a href="#普通问题" class="headerlink" title="普通问题"></a>普通问题</h3><ol>
<li><p>什么是进程？和程序的区别？</p>
<p>进程是执行中的程序，是动态的，程序是静态的代码集合</p>
</li>
<li><p>进程拥有哪些状态，状态如何切换</p>
</li>
<li><p>什么是上下文切换，开销在哪？</p>
<p>切换进程时保存和恢复现场的过程，开销主要在寄存器，内存映射</p>
</li>
</ol>
<h3 id="项目问题"><a href="#项目问题" class="headerlink" title="项目问题"></a>项目问题</h3><p><strong>1. 在C++高性能服务器中，为什么我们通常选择使用多线程而不是多进程？在什么场景下你会反其道而行之，选择多进程？</strong></p>
<ul>
<li><strong>选多线程</strong>：因为线程间共享内存，<strong>数据共享极其高效</strong>（无需序列化、进程间通信），上下文切换开销小，非常适合用于处理同一任务的多个部分（如一个连接一个线程，共享监听socket和缓存）。</li>
<li><strong>选多进程</strong>：<ul>
<li><strong>需要更好的隔离性和健壮性</strong>。例如，一个处理用户请求的模块崩溃了，你不希望它把整个服务器拖垮。使用进程可以隔离这种故障。</li>
<li><strong>利用多机扩展</strong>。进程模型更容易扩展到分布式系统。</li>
<li><strong>利用第三方库</strong>。某些第三方库不是线程安全的，将其放在独立的进程中是最安全的用法。</li>
</ul>
</li>
</ul>
<p><strong>2. 在C++程序中，进程上下文切换具体会导致哪些我们需要注意的性能损耗？</strong></p>
<p>这远不止是“保存&#x2F;恢复寄存器”那么简单。在工程上我们需要关注：</p>
<ul>
<li><strong>TLB（快表）失效</strong>：切换内存地址空间意味着TLB大部分或全部需要刷新，导致后续内存访问需要多次内存查找，这是<strong>最大的开销之一</strong>。</li>
<li><strong>CPU Cache失效</strong>：新进程的数据和代码会“污染”当前CPU缓存，缓存命中率急剧下降。</li>
<li><strong>调度器自身开销</strong>：如果进程数非常多，调度器选择下一个进程的算法本身也会消耗CPU时间。</li>
</ul>
<p><strong>3. 假设你写了一个C++程序，用 <code>fork()</code> 创建了子进程。在子进程中，如果一个文件描述符在父进程中被加锁（如 <code>flock</code>），子进程会继承这个锁吗？这可能导致什么工程问题？</strong></p>
<ul>
<li><strong>会继承</strong>。在Linux中，子进程会继承父进程的文件描述符表，包括其上的锁状态。</li>
<li><strong>工程问题</strong>：这可能导致<strong>难以调试的死锁</strong>。例如，父进程锁了一个文件，子进程也试图去锁同一个文件（通过同一个文件描述符），在某些锁类型下，子进程可能会成功（递归锁）或阻塞，行为取决于具体实现和锁类型，容易造成逻辑混乱。<strong>最佳实践</strong>是 <code>fork()</code> 后，子进程应立即关闭不需要的文件描述符，或使用 <code>fcntl</code> 设置 <code>FD_CLOEXEC</code> 标志。</li>
</ul>
<p><strong>4. 在Linux C++编程中，<code>fork()</code> 和 <code>exec()</code> 系列函数通常一起使用。请问在 <code>fork()</code> 之后，<code>exec()</code> 之前，子进程应该特别注意处理哪些资源？为什么？</strong></p>
<p>这是一个经典陷阱。在 <code>fork()</code> 后 <code>exec()</code> 前，子进程拥有父进程的完整副本。但 <code>exec()</code> 会用新程序替换当前进程的代码、数据、堆栈。因此必须注意：</p>
<ul>
<li><strong>关闭不需要的文件描述符</strong>：否则会被新程序继承，可能导致资源泄漏或意外的文件访问。</li>
<li><strong>处理信号</strong>：继承的信号处理函数可能在新程序中不存在，导致未定义行为。通常需要在 <code>exec()</code> 前将信号重置为默认状态。</li>
<li><strong>同步问题</strong>：确保子进程不会和父进程在共享资源（如临时文件）上产生竞争。</li>
</ul>
<h2 id="线程-1"><a href="#线程-1" class="headerlink" title="线程"></a>线程</h2><ol>
<li><p>一个线程意外崩溃会导致什么</p>
<p>整个进程崩溃</p>
</li>
<li><p>多线程编程中为什么要用到线程同步</p>
<p>否则会导致数据竞争</p>
</li>
<li><p>多线程程序一定能提高性能吗？</p>
<p>不一定，当</p>
<ol>
<li>线程数大于CPU核心数，频繁上下文切换</li>
<li>大量线程竞争同一把锁</li>
<li>缓存一致性协议</li>
</ol>
</li>
<li><p>什么是虚假唤醒，如何处理</p>
<p>虚假唤醒指等待条件变量的线程可能在没被通知的情况下被唤醒</p>
<p>处理方法为使用while循环检查，而不是if语句</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">std::unique_lock&lt;std::mutex&gt; <span class="title">lock</span><span class="params">(mutex)</span></span>;</span><br><span class="line"><span class="keyword">while</span> (!condition) &#123;</span><br><span class="line">    cond_var.<span class="built_in">wait</span>(lock);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>os</category>
      </categories>
  </entry>
  <entry>
    <title>通信网关</title>
    <url>/2025/10/17/%E9%80%9A%E4%BF%A1%E7%BD%91%E5%85%B3/</url>
    <content><![CDATA[<h1 id="系统概述"><a href="#系统概述" class="headerlink" title="系统概述"></a>系统概述</h1><p>本系统为一个工业通信网关系统，用于连接和管理多种工业设备，实现跨协议的数据采集和转发。采用分层架构设计，模块松耦合，支持热插拔和动态扩展。</p>
<span id="more"></span>

<h2 id="系统架构分层"><a href="#系统架构分层" class="headerlink" title="系统架构分层"></a>系统架构分层</h2><p>[UI] –&gt; [SDK] –&gt; [代理层线程] –&gt; [框架层] –&gt; [模块基类] –&gt; [PLC实现]</p>
<p>[SDK] &lt;– [代理层返回数据]</p>
<p>[模块管理类] –观察者–&gt; [模块Node]  生命周期统一管理</p>
<h1 id="核心技术实现"><a href="#核心技术实现" class="headerlink" title="核心技术实现"></a>核心技术实现</h1><h2 id="设计模式应用"><a href="#设计模式应用" class="headerlink" title="设计模式应用"></a>设计模式应用</h2><table>
<thead>
<tr>
<th>模式</th>
<th>应用场景</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>工厂模式</td>
<td>PLC品牌扩展</td>
<td>支持 Beckhoff、Keyence、Siemens 等厂商，新增品牌无需修改工厂类。</td>
</tr>
<tr>
<td>策略模式</td>
<td>数据发送策略</td>
<td>支持 单次、批量、字符串、整型 等策略，可动态切换。</td>
</tr>
<tr>
<td>代理模式</td>
<td>SDK与框架隔离</td>
<td>隐藏200+框架接口，统一处理异常，提升安全性。</td>
</tr>
<tr>
<td>观察者模式</td>
<td>模块生命周期管理</td>
<td>模块删除时，自动卸载其关联线程与资源。</td>
</tr>
</tbody></table>
<h2 id="关键机制"><a href="#关键机制" class="headerlink" title="关键机制"></a>关键机制</h2><ul>
<li>多线程代理层：独立线程处理请求路由，使用有界队列避免消息堆积</li>
<li>动态加载机制：通过模块库管理类单例加载DLL，调用标准<code>__stdcall</code>接口创建模块实例</li>
<li>心跳管理机制：使用统一线程池轮询多模块，避免重复创建线程，提升性能</li>
</ul>
<h1 id="性能优化策略"><a href="#性能优化策略" class="headerlink" title="性能优化策略"></a>性能优化策略</h1><table>
<thead>
<tr>
<th>优化项</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>通信超时控制</td>
<td>通信库中设置毫秒级超时，防止线程阻塞</td>
</tr>
<tr>
<td>资源回收</td>
<td>模块销毁时自动清理Node指针与关联线程</td>
</tr>
<tr>
<td>内存管理</td>
<td>使用智能指针管理模块实例，防止内存泄漏</td>
</tr>
</tbody></table>
<h1 id="安全设计"><a href="#安全设计" class="headerlink" title="安全设计"></a>安全设计</h1><ul>
<li>通信安全：代理层对SDK请求进行校验和过滤</li>
<li>接口隔离：代理层隐藏框架接口，仅暴露sdk接口</li>
<li>协议加固：手动实现PLC协议交互，不依赖厂商DLL，报文严格校验，连接前主动验证</li>
</ul>
<h1 id="模块生命周期管理流程"><a href="#模块生命周期管理流程" class="headerlink" title="模块生命周期管理流程"></a>模块生命周期管理流程</h1><ol>
<li>UI 操作：用户点击“添加模块”按钮，选择“西门子 S7”，点击确认。</li>
<li>SDK 层：<ol>
<li>调用 SDK 提供的接口：XXX_增加模块()。</li>
<li>封装为 JSON 报文，通过通信库 write() 发送给代理层。</li>
</ol>
</li>
<li>代理层（独立线程）：<ol>
<li>通过 read() 接收 JSON 报文。</li>
<li>解析报文，识别为“添加模块”请求。</li>
<li>调用框架层的“添加模块”接口。</li>
</ol>
</li>
<li>框架层：<ol>
<li>模块资源管理类单例调用 addModule()。</li>
<li>动态加载对应 DLL，创建模块实例（继承自模块基类）。</li>
<li>将模块信息封装为 Node 指针，存入 vector<pair> 中。</pair></li>
</ol>
</li>
<li>响应返回：<ol>
<li>代理重新组装响应报文，通过通信库返回 SDK。</li>
</ol>
</li>
</ol>
<h1 id="多线程与并发管理"><a href="#多线程与并发管理" class="headerlink" title="多线程与并发管理"></a>多线程与并发管理</h1><ul>
<li><p>代理层独立线程</p>
<p>负责接收SDK请求并分发，避免阻塞UI</p>
</li>
<li><p>轮询任务处理</p>
<p>使用同一线程池，一个线程处理多个轮询任务，避免重复创建</p>
</li>
<li><p>消息队列机制</p>
<p>SDK为生产者，代理线程为消费者</p>
<p>使用有界队列防止消息堆积，超量时丢弃旧消息</p>
</li>
</ul>
<h1 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h1><h2 id="工厂模式如何支持新PLC扩展"><a href="#工厂模式如何支持新PLC扩展" class="headerlink" title="工厂模式如何支持新PLC扩展"></a>工厂模式如何支持新PLC扩展</h2><p>工厂类无需修改，新增PLC类集成模块基类注册即可</p>
<h2 id="策略模式如何切换发送策略"><a href="#策略模式如何切换发送策略" class="headerlink" title="策略模式如何切换发送策略"></a>策略模式如何切换发送策略</h2><p>运行时根据策略对象动态调用sendSingleData。sendString等方法</p>
<h2 id="读取是否会阻塞导致堆积"><a href="#读取是否会阻塞导致堆积" class="headerlink" title="读取是否会阻塞导致堆积"></a>读取是否会阻塞导致堆积</h2><p>通信库设置超时机制，超时则返回</p>
<h2 id="一个模块多个轮询会重复启动线程吗"><a href="#一个模块多个轮询会重复启动线程吗" class="headerlink" title="一个模块多个轮询会重复启动线程吗"></a>一个模块多个轮询会重复启动线程吗</h2><p>不会，统一使用线程池中的线程管理</p>
<h2 id="模块销毁时是否会自动停止线程"><a href="#模块销毁时是否会自动停止线程" class="headerlink" title="模块销毁时是否会自动停止线程"></a>模块销毁时是否会自动停止线程</h2><p>会，通过观察者模式通知心跳与任务管理类主动卸载线程</p>
<h2 id="代理层如何避免信息堆积"><a href="#代理层如何避免信息堆积" class="headerlink" title="代理层如何避免信息堆积"></a>代理层如何避免信息堆积</h2><p>有界队列控制最大消息数量，防止资源耗尽</p>
<h1 id="宽泛问题"><a href="#宽泛问题" class="headerlink" title="宽泛问题"></a>宽泛问题</h1><h2 id="这个系统为什么采用分层架构？"><a href="#这个系统为什么采用分层架构？" class="headerlink" title="这个系统为什么采用分层架构？"></a>这个系统为什么采用分层架构？</h2><ol>
<li><p>关注点分离 (Separation of Concerns)：将系统划分为不同的层，每一层专注于特定的功能。</p>
<ol>
<li><p>C# UI层：专注于用户交互和界面展示。</p>
</li>
<li><p>SDK层：为上层（UI）提供统一、简化的接口，屏蔽底层复杂性。</p>
</li>
<li><p>代理层：负责请求的转发、路由、线程隔离和初步处理（如校验、过滤）。</p>
</li>
<li><p>框架层：提供模块管理、生命周期管理、核心流程控制等基础功能。</p>
</li>
<li><p>模块基类&#x2F;PLC实现层：专注于具体的通信协议实现（如与西门子、欧姆龙等PLC的交互）。</p>
<p>这种分离使得开发、维护和理解系统变得更加容易。</p>
</li>
</ol>
</li>
<li><p>模块化与可维护性 (Modularity &amp; Maintainability)：各层相对独立，修改某一层的实现通常不会直接影响到其他层（只要接口保持不变）。例如，新增一个PLC品牌的支持（模块实现层）不需要改动UI或SDK层的核心代码（得益于工厂模式）。这大大提高了系统的可维护性。</p>
</li>
<li><p>可扩展性 (Extensibility)：通过接口和抽象（如模块基类、策略接口），可以在不影响现有代码结构的情况下扩展功能。例如，通过动态库和工厂模式轻松添加新的PLC类型；通过策略模式在运行时切换数据发送方式。</p>
</li>
<li><p>复用性 (Reusability)：某些层或组件可以在不同场景下复用。例如，代理层的线程模型、通信库、心跳管理等通用机制可以被多个模块复用。</p>
</li>
<li><p>隔离与稳定性 (Isolation &amp; Stability)：</p>
<ol>
<li>代理层通过独立线程处理请求，隔离了UI线程，防止底层耗时操作（如网络通信）导致界面卡死。</li>
<li>代理模式隔离了SDK和框架层，SDK无需直接调用复杂的框架接口，框架的内部变化不会轻易波及SDK。</li>
<li>模块通过动态库加载，实现了热插拔，一个模块的异常理论上不会轻易影响其他模块或核心系统（理想情况下）。</li>
</ol>
</li>
<li><p>控制复杂性 (Managing Complexity)：将一个庞大的系统分解为多个更小、更易管理的部分，有助于控制整体复杂度。</p>
</li>
</ol>
<h2 id="为什么使用代理模式，仅仅为了隐藏接口吗"><a href="#为什么使用代理模式，仅仅为了隐藏接口吗" class="headerlink" title="为什么使用代理模式，仅仅为了隐藏接口吗"></a>为什么使用代理模式，仅仅为了隐藏接口吗</h2><p>除了隐藏接口，还有如下功能：</p>
<ol>
<li><p>统一异常处理</p>
<p>代理层可以捕获来自框架层的所有异常，在代理内部进行统一的处理（如记录日志、转换为SDK能理解的错误码、进行重试等），然后将处理后的结果（成功&#x2F;失败状态、数据）返回给SDK。这样，SDK无需关心底层可能发生的复杂异常，只需处理代理返回的标准化结果即可，提高了系统的健壮性和SDK代码的简洁性。</p>
</li>
<li><p>线程隔离与防止界面卡死</p>
</li>
<li><p>请求校验，对参数合法性和权限进行过滤，阻止无效请求进入框架</p>
</li>
</ol>
<h2 id="遇到的最大困难是什么？怎么解决的？"><a href="#遇到的最大困难是什么？怎么解决的？" class="headerlink" title="遇到的最大困难是什么？怎么解决的？"></a>遇到的最大困难是什么？怎么解决的？</h2><h3 id="解决方案："><a href="#解决方案：" class="headerlink" title="解决方案："></a>解决方案：</h3><p>最大的困难是模块热插拔过程中多线程安全和资源回收的问题。</p>
<p><strong>问题分析：</strong></p>
<ul>
<li>模块在任意线程中被创建和销毁</li>
<li>模块销毁时，其他线程可能还在使用模块资源（socket、定时器等）</li>
<li>导致崩溃或内存泄漏</li>
</ul>
<p><strong>解决方案：</strong></p>
<ol>
<li><strong>引入观察者模式</strong>：模块销毁时广播事件，通知所有注册线程清理相关资源</li>
<li><strong>智能指针管理</strong>：使用 <code>shared_ptr</code> 管理模块实例，确保所有线程释放引用后才真正销毁</li>
<li><strong>状态管理机制</strong>：实现模块状态管理（正在加载、运行中、销毁中），避免销毁过程中被其他线程使用</li>
</ol>
<h2 id="心跳管理是怎么设计的？线程怎么复用？"><a href="#心跳管理是怎么设计的？线程怎么复用？" class="headerlink" title="心跳管理是怎么设计的？线程怎么复用？"></a>心跳管理是怎么设计的？线程怎么复用？</h2><h3 id="解决方案：-1"><a href="#解决方案：-1" class="headerlink" title="解决方案："></a>解决方案：</h3><p><strong>设计架构：</strong></p>
<ul>
<li>统一线程池处理所有模块的心跳任务</li>
<li>每个模块的心跳任务提交到线程池中执行</li>
</ul>
<p><strong>线程复用机制：</strong></p>
<ul>
<li>使用固定大小的线程池，避免频繁创建线程</li>
<li>心跳任务由空闲线程执行</li>
<li>模块只需注册心跳回调函数，系统自动按周期提交任务</li>
</ul>
<p><strong>资源管理：</strong></p>
<ul>
<li>模块删除时自动取消心跳注册</li>
<li>通知线程池停止执行相关任务</li>
<li>实现任务解耦和资源自动回收</li>
</ul>
<h2 id="为什么使用有界队列？容量如何确定？溢出怎么处理？"><a href="#为什么使用有界队列？容量如何确定？溢出怎么处理？" class="headerlink" title="为什么使用有界队列？容量如何确定？溢出怎么处理？"></a>为什么使用有界队列？容量如何确定？溢出怎么处理？</h2><h3 id="解决方案：-2"><a href="#解决方案：-2" class="headerlink" title="解决方案："></a>解决方案：</h3><p><strong>使用有界队列的原因：</strong></p>
<ul>
<li>防止代理层处理能力不足导致 SDK 层消息堆积</li>
<li>控制内存使用，避免无限增长</li>
</ul>
<p><strong>容量确定方法：</strong></p>
<ul>
<li>基于压测时的吞吐量和延迟要求</li>
<li>设定最大容忍的消息积压数（如 1000 条）</li>
</ul>
<p><strong>溢出处理策略：</strong></p>
<ul>
<li>超过容量时丢弃旧消息</li>
<li>消息优先级分类：<ul>
<li>高优先级：模块变更消息</li>
<li>低优先级：轮询消息</li>
</ul>
</li>
<li>确保关键操作不被丢弃</li>
</ul>
<h2 id="如果某个模块初始化失败，怎么避免影响整个系统？"><a href="#如果某个模块初始化失败，怎么避免影响整个系统？" class="headerlink" title="如果某个模块初始化失败，怎么避免影响整个系统？"></a>如果某个模块初始化失败，怎么避免影响整个系统？</h2><h3 id="解决方案：-3"><a href="#解决方案：-3" class="headerlink" title="解决方案："></a>解决方案：</h3><p><strong>错误处理机制：</strong></p>
<ol>
<li><strong>异常捕获</strong>：通过代理层统一捕获异常并记录日志</li>
<li><strong>错误码返回</strong>：返回明确错误码给 SDK 层</li>
<li><strong>超时控制</strong>：对每个模块启动进行超时控制，避免卡死系统</li>
</ol>
<p><strong>隔离策略：</strong></p>
<ul>
<li>失败模块不加入全局模块列表</li>
<li>不影响其他模块正常运行</li>
<li>系统保持可用状态</li>
</ul>
]]></content>
      <categories>
        <category>proj</category>
      </categories>
  </entry>
</search>
